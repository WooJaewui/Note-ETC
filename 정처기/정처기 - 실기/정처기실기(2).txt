SQL ( 1 ~ 2개 ) -> 요구사항 확인 ( 다이어그램 1문제, 디자인패턴 ) -> 보안( 2문제 ) 
-> SW응용기초기술 ( 네트워크 부분 1문제 이상) -> 데이터입출력 ( EAI, 데이터포맷 부분 )
-> 서버프로그램구현 -> 인터페이스 구현 -> 화면 설계 -> 자료구조 및 알고리즘.


 # SQL 

1. 관계 대수.
 - 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는 가를 기술하는 절차적 언어.
 - 순서대로 수행.
 - 종류 
    - 일반 집합 연산자 : 합집합 - 'U'
                             교집합 - '∩'
                             차집합 - '-' , 
                             카티션 프로덕트 ( Cross join ) - 'X' : 2개의 테이블에 모든 조합이라서
                                                                          속성의 수는 더한만큼 나오고 튜플의 수는 곱한 만큼 나온다.
    - 순수 관계 연산자 : select - 선택 조건을 만족하는 릴레이션의 수평적 부분 집합 : SQL에서는 where.
                             project - 릴레이션의 수직적 부분 집합 : SQL에서는 select.
                             join - 두 개의 릴레이션을 합치는 것.
                             division - 하나의 테이블에만 존재하는 속성 : '÷'


2. 관계 해석.
 - predicate calculus로 질의어를 표현.
 - 비절차적 언어.
 - 튜플 관계 해석과 도메인 관계 해석이 있다.


3. SQL.
 - 관계형 데이터베이스를 지원하는 비절차적 질의어.
 - SQL의 분류
     - DDL( Data Definition Language ) : - 데이터베이스 개체를 조작하는 언어.
                                                  - Create : 생성.
                                                  - Alter : 구조 변경.
                                                  - Drop : 구조 삭제.
                                                  - Truncate : 테이블의 데이터를 삭제.
                                                  - Rename : 이름을 변경.
     - DML( Data Manipulation Language ) : 데이터를 ㅇㅇㅇㅇ하는 언어.
                                                      - Insert : 데이터 삽입.
                                                      - Update : 데이터 수정.
                                                      - Delete : 데이터 삭제.
                                                      - Select : 데이터 조희. ( 실무에서는 DML로 안본다 )
     - DCL ( Data Control Language ) : - 데이터를 제어하는 언어.
                                                - Grant : 권한 부여.
                                                - Revoke : 권한 회수.
                                                - Commit : 현재까지의 작업을 완료해서 데이터베이스에 반영. ( 실무 - DCL X )
                                                - Rollback : 트랜잭션이 만들어지는 지점으로 되돌아가는 것. 작업취소.( 실무 - DCL X )
                                                - SavePoint : Rollback할 지점을 만드는 명령. ( 실무 - DCL X )

 - DDL
    - 수행한 내용을 데이터 사전 ( Data Dictionary - 메타 데이터, 데이터를 위한 데이터 )에 기록을 합니다.
    - 스키마 : 하나의 데이터 구조로 보통은 하나의 데이터베이스.
    - 테이블 : 실제 데이터가 저장되는 저장공간.
    - 도메인 : 테이블 안에 저장되는 데이터가 가질 수 있는 값으로 타입, 크기, 제약조건 등.
    - 뷰 : 하나 이상의 테이블로부터 유도된 가상의 테이블.
    - Index : 데이터조회를 빠르게 하기 위한 개체.
    - procedure : SQL 명령어를 자동으로 수행하게 해주는 절차적 언어로 만든 개체. ( 고급언어의 function )
    - trigger : DML 문장이 수행될 때 자동으로 다른 동작을 수행할 수 있도록 만든 개체. ( 유효성 검사, 로그 작성 ) 
    - Create 작업단위 이름(옵션..)
    - Alter 작업단위 이름 수정할작업 옵션 나열.
    - Drop 작업단위 이름.

 - 제약조건 ( Constraint )
    - 테이블의 데이터가 반드시 지켜야 할 조건.
    - Primary key : - 테이블의 유일한 식별자, 유일성과 최소성 그리고 대표성을 가짐. ( not null, unique )
                       - 개체 무결성 : 기본키는 null이거나 중복될 수 없다.
    - Foreign key : - 다른 테이블의 데이터를 참조하기 위한 속성, 다른 테이블에서는 primary key이어야 한다.
                       - 참조 무결성 : 외래키는 null이거나 참조할 수 있는 값만을 가져야 한다.
                       - no action ( 참조하는 데이터가 삭제되도 아무것도 하지 않음 )
                       - set null ( 참조하는 데이터가 삭제되면 null로 변경 )
                       - cascade ( 참조하는 데이터가 삭제되면 같이 삭제 ) 
                       - Unique : 유일성.
                       - Not Null : Null일 수 없다 - 필수.
                       - Check : 속성의 유효성 검사를 위한 조건.
                       - 도메인 무결성 : 속성의 값은 도메인에 설정한 값만을 가져야 한다.

 - 자료형.
     - char : - 크기가 고정된 문자열.
                - char(10)으로 설정한 경우 실제 입력된 문자열이 'Hello'일 때 문자는 5개인데도 10칸을 확보.
                  ( 나머지 공간은 빈칸으로 둔다 - trim을 생각해 둬야 된다 )

     - varchar : - 크기가 가변적인 문자열.
                   - varchar(10)으로 설정한 경우 먼저 10칸을 확보하고 Hello라는 문자열을 저장할 때 
                      5칸이 남는데 이 공간에 다른 데이터를 저장할 수 있다. ( 여분 X )
                   - 데이터의 크기가 변경 되면 Row Migration( 행 이주 - 데이터베이스 성능 떨어짐 )이 발생할 수 있다.
     - blob : - 바이트 배열을 저장하는 자료형으로 파일의 내용을 저장할 때 사용.

 - DCL
     - 무결성, 회복, 병행수행 제어, 보안 등의 기능을 수행하는 명렁어.
     - Grant와 Revoke : 권한 부여 및 회수.
     - Commit, Rollback, SavePoint 

 - DML
    - 삽입 : insert into 테이블이름(속성이름 나열) values(값 나열);
    - 수정 : update 테이블이름 set 수정할 내용 where 조건;
    - 삭제 : delete from 테이블이름 where 조건;
    - 조회 : select [distinct] 조회할 속성 이름 나열 from 테이블이름 where 조건 
              group by 그룹화할 속성 having 그룹화 한 이후의 조건 order by 정렬할 속성.
    - 실행 순서 : from -> where -> group by -> having -> select -> order by.
    - distinct : 중복을 제거.
    - 수정이나 삭제에서 where가 없으면 테이블의 모든 데이터를 수정/삭제한다.
    - in : 여러 개 중 하나.
    - is null : null 검색.
    - like : 패턴 검색. '%' : 글자 수 제한 없음 ( 0개 이상 ), '_' : 한 글자.

 - 학생 테이블의 컴퓨터 공학과가 100명 기계공학과 50명 건축공학과 50명 존재할 경우.
   - select 학과 from 학생;                                                              200명.
   - select distinct(학과) from 학생;                                                   3개. ( 학과의 수 )
   - select distinct(count(학과)) from 학생 where 학과='컴퓨터공학과';        1개. ( 컴퓨터 공학과 )
   - 튜플의 수를 묻는 문제인지 결과를 묻는 문제인지 잘 확인하자. 학과, count(학과)

 - Join 
    - 2개의 테이블을 결합해서 하나의 테이블을 만드는 것.
    - Cross Join - Catesian Product 
           - 양쪽 테이블의 동일한 데이터 여부에 상관없이 모든 조합을 만드는 것.
           - 행(튜플)의 개수는 양쪽 테이블의 행의 개수를 곱한 것과 같고 
             열의 개수는 테이블의 열의 개수를 더한 것과 같다.
    - Inner Join
           - 양쪽 테이블에 동일한 의미를 갖는 컬럼의 값이 같은 경우에만 결합하는 것.
           - inner join변형 : where절에 기술하지 않고 using을 이용해서 기술하기도 하고
                                natural join을 이용해서 하기도 한다.
           - natural join을 할 때는 양쪽 테이블에 동일한 의미를 갖는 열의 이름이 같아야 하면
             열을 중복되지 않고 1개만 출력됩니다.
    - outer Join
          - 어느 한쪽 테이블에만 존재하는 데이터도 join에 참여하는 것.
          - 자신에게 없는 정보는 null로 설정된다.
    - self Join
          - 자기 자신과 join.
    - equi join과 non equi join.
          - 양쪽 테이블에 존재하는 동일한 의미의 컬럼을 비교할 때 '='를 사용하면 equi join
            등호 이외의 연산자( between A and B )를 사용하면 non equi join이다.
    - 집합연산자 
          - 열의 개수와 자료형이 일치하는 경우 사용하는 연산자.
          - union : 합집합 - 중복되는 data 1번만 표시.
          - union all : 합집합 - 중복된 데이터를 전부 표시.
          - intersect : 교집합 - 중복된 데이터만 표시
          - minus(except) : 차집합 - 한쪽에 존재하는 데이터만 표시.

 - Sub Query
     - 다른 SQL안에 포함된 SQL.
     - 괄호로 묶어야 하고 처음에 한 번만 먼저 수행된다.
     - from( inline view ) 절과 where 절에 사용할 수 있음.
     - 서브 쿼리의 결과가 2개 이상의 행이면 단일 행 연산자( =, <>, !=, ... )를 사용하면 안되고 
       다중 행 연산자( in, not in, all, nay )를 사용해야 된다 
     
강사님 블로그에 SQL - 10 view 시퀀스, 동의어까지 보기. 


 # 요구 사항 확인. ( 1 ~ 2문제 무조건 나옴 )


1. SQ 위기와 공학.
 - SW위기 : HW 발전 속도를 SW 발전 속도가 따라 잡지 못하는 현상.
 - SW Engineering(공학) : SW 위기를 극복하기 위한 방법으로 SW 개발을 공학적으로 접근하는 학문.


2. SW 개발 방법론.
 - 개발 과정에 필요한 각종 기법 및 도구를 체계적으로 표준화한 것.
 - 방법론의 종류.
    - 구조적 방법론 : 문서화해서 절차적으로 진행.
    - 정보 공학 방법론 : 데이터 중심의 개발 방법론.
    - 객체 지향 방법론 : 클래스와 객체 중심으로 개발.
    - 컴포넌트 기반 방법론( CBD ) : 객체 생성과 수명주기 관리를 시스템이나 프레임워크가 수행하는 방법론으로
                                            프로그램을 컴포넌트의 조합을노 해석. ex ) Spring Java new가 사라짐. 
    - Agile 방법론 : 작은 주기를 가지고 여러 번 반복해서 개발, 사용자의 요구사항 변경을 빠르게 처리.
    - 제품 계열 방법론 : 공통 기능을 만들어서 제품에 적용하고 업그레이드 해가는 방식. 
                              ( 주요 기능만 만들고 반응 확인 후 업그레이드 )
 - 폭포수 모델 : - 단계별 정의가 명확한 방식, 순서대로 실행하는 방식, 사용자의 요구사항 변경에 취약.
                    - 타당성 검토 -> 계획과 요구사항 분석 -> 설계(개략 -> 상세) -> 구현( Coading )
                      -> 검사 -> 운용 -> 유지보수.
 - 프로토타이핑 : - 요구사항을 미리 파악하기 위해서 시제품을 만들어서 개발하는 방식.
 - 나선형 모델 : - 계획 -> 위험 분석 -> 구현 -> 고객 평가 듣는 과정을 반복하는 방식. ( CBD, Agile )
 - TDD( Test Driven Development ) : - 매우 짧은 개발 사이클을 반복하는 방식.
                                              - 요구사항을 검증하는 자동화된 테스트 케이스를 만들고 
                                                테스트 케이스를 통과하기 위한 최소한의 코드를 생성하면서 개발.
                                                ( 실제 작동하지 않아도 됨 - 테스트 )
 - Agile : - 신속한 반복 작업을 통해 실제 작동 가능한 소프트웨어를 개발해서 
              지속적으로 제공하는 소프트웨어 개발방식. ( 실제 작동 해야됨 )
            - 고객의 변화하는 요구사항과 환경변화에 능동적으로 대처하기 위한 소프트웨어 개발 방법론.
            - 스크럼 : 팀 중심으로 개발의 효율성을 높이는 방법.
            - XP모형 : 개발의 생산성을 높이기 위해서 릴리즈 테스트마다 고객을 참여시키는 방식.
            - 중요하다.


3. 개발 환경 파악.
 - 운영체제
     - 서버용 운영체제
         - Unix : bell 연구소에서 여러 네이트워크에 서비스를 제공할 목적으로 C언어로 만든 운영체제.
                   Unix를 만들기 위해 C언어가 탄생.
         - Linux : Unix 상용화에 반대해서 리누스 토발즈가 만든 오픈 소스 운영체제.
         - Windows : MS 사에서 만든 운영체제.
      - 클라이언트용 운영체제.
         - MS-Windows.
         - Mac OS X : Unix 기반.
         - Android : Linux 기반의 OHA 컨소시엄에서 만든 운영체제. ( 구글은 자본금을 대줌 )
         - iOS : Apple의 모바일 운영체제 - Unix 기반 
         - Tizen : 삼성이 참여한 모바일 운영체제 - 내부는 Linux 외부는 Web
 - DBMS 
     - RDBMS : 테이블 기반의 데이터베이스, SQL로 질의.
         - Oracle, MySQL(MariaDB), MS-SQL Server, HANA DB, Tibero 등.
     - No SQL : not Only SQL, 테이블이 아닌 Key-Value 형태나 Document 형태로 데이터를 저장하는 방식.
         - Mongo DB,  Cassandra, HBase, BigTable( Google )등 
 - Middle Ware
     - 운영체제와 데이터베이스, 데이터베이스와 애플리케이션 서버, 서버와 클라이언트 사이에서 
       중계하는 역할 또는 모니터링을 수행해주는 어플리케이션이다.
     - Web Application Server(WAS) : - 데이터베이스와 애플리케이션 서버 그리고 웹서버와 중계역할을 한다.
                                               - Tomcat, JEUS 등.
 - IDE ( 통합 개발 환경 )
     - 소스코드를 작성하고 컴파일, 빌드, 배포 등을 자동으로 수행해주는 도구.
     - Ecelipse, IntelliJ, Jupyter notebook, vs Code 등. 


4. 구조적 분석.
 - 자료의 흐름과 처리를 중심으로 요구 사항을 분석해 나가는 기법.
 - 하향식 방법을 사용
 - 도구
    - DFD : 자료 흐름도 - 자료의 흐름을 도식화.
    - DD : 데이터 사전 - 데이터에 대한 구조를 도식화. ( 글 )
    - Mini-Spec : 프로세스에 대한 부분을 도식화.
    - ERD : 개체 관계 다이어그램, 데이터 구조에 대한 도식화. ( 그림 )
    - STD : 상태 전이도.
    - 제어명세서
    - DFD, DD, ERD가 나올 확률이 높고, 그림을 한 번 확인해 보는 것이 좋다 )
 - HIPO ( Hierarchical Input Process Output ) 
    - 입력, 처리, 출력으로 이루어진 모듈을 계층적으로 나타낸 도표.


5. UML
 - 시스템에 대한 지식을 찾고 표현하기 위한 언어. ( 그림, 글 둘 다 나온 적이 있다 )
 - Use Case Diagram
    - 그림을 보고 이해 할 줄 알아야 된다.
 - Class Diagram
    - 클래스의 구조와 관계를 도식화.
    - 클래스는 속성과 메소드의 집합.
    - 관계
         - is a : - 상속 ( 일반화 ) 
         - has a : 포함 - 포함은 다시 여러개로 나뉜다.
 - Sequence Diagram
    - 작업의 시간적 순서를 도식화.
 - Communication Diagram
    - 객체와 객체 사이에 메시지를 표현.


6. 형상 관리.
 - 변경사항을 관리하는 것.


7. 비용 산정 방법.
 - 하향식 방법 : 전문가가 감정.
    - 전문가가 감정 : 2명 이상의 전문가에게 의뢰.
    - 델파이식 : 조정자를 두는 형태.
 - 상향식 방법.
    - LOC 기법 : 라인수를 가지고 산정.
    - Man/Month 기법 : 몇 명이 몇 개월을 작업했는지 
                              ex ) 1MM은 1명이 1개월, 10MM 1명이 10개월 or 10명이 1개월.
    - Broocks의 법칙 : 지체되는 소프트웨어 개발 프로젝트에 인력을 추가 투입하는 것은 
                            프로젝트의 개발을 더 늦게 할 수 있다.
    - COCOMO : 프로젝트를 규모나 종류별로 분류해서 비용을 산정.
    - 생명주기 예측 모형.
    - 기능점수 모형.
 - 비용 산정 자동화 도구.
    - SLIM
    - ESTIMACS


8. 일정관리.
 - 용어를 정확히 알고 있자.
 - WBS( Work Breakdown Structure - 작업 분해 구조 ) : 작업을 분할하는 것.
 - PERT/CPM( 임계경로 ) : - CPM은 목저지에 도달하기 위한 최대값. 
                                 - CPM 계산 문제가 나올 수 있음. ( 여러 길 중 최대로 오래 걸리는 길 )
 - Gantt 차트
     - 프로젝트 일정을 bar형태로 나타내는 차트.


9. 표준화.
 - CMMI.
    - 소프트웨어 개발 및 전산 장비 운영 업체들의 업무 능력 및 조직의 성숙도를 평가하기 위한 모델.
 - SPICE.
    - 소프트웨어 프로세스 심사를 위한 국제 표준화 프로젝트.
 - Tailoring ( 시험 나올 수 있음 )
    - 프로젝트를 진행 시 회사의 표준 방법론이나 표준 산출물을 활용해서 개별과제의 특성에 맞도록 
       방법론과 산출물을 보완하는 방식.


10. SW 공학의 3R
 - Reverse Engineering( 역공학 ) : - 이미 구현된 제품에서 설계정보를 추출하는 것.
                                          - Alien Code : 오래전에 만들어져서 설계정보가 없는 코드.
                                                             ( 유지보수를 어렵게 함 )
 - ReEngineering( 재공학 ) : - 현존하는 시스템을 자동화된 도구로 점검 또는 수정하는 프로세스.
 - Reuse( 재사용 ) 


11. Refactoring
 - 외부 동작을 변경하지 않고 내부 구조를 개선하는 방법.


12. CASE ( Computer Aided Software Engineering )
 - 소프트웨어 위기 현상을 해결하기 위해서 소프트웨어 생산 자체를 컴퓨터의 도움으로 자동화시키자는 개념으로 탄생.
 

13. Framework 
 - 소프트웨어 개발에 공통적으로 사용하는 구성 요소와 아키텍처를 일반화해서 
   구현을 쉽게 할 수 있도록 여러가지 기능을 제공해주는 소프트웨어시스템.
 - IoC( 제어의 역전, 제어의 역흐름, Inversion of Control ) : 객체의 관계 및 수명주기를 프레임워크가 관리하는 것.
 - DI( 의존성 주입, Dependency Injection ) : 내부에서 사용할 객체를 직접 생성하지 않고 외부에서 만들어서 대입.
 - AoP( 관점 지향 프로그래밍, Aspect of Programing ) : Business Logic과 Common Concern( 공통관심사항 )을
                                                                     분리해서 프로그래밍.
 - Spring( 전자 정부 프레임 ), '.net' 프레임워크가 많이 사용됨.


14. 명명법.
 - Pascal Casing.
    - 클래스, 열거형, 이벤트, 메소드 등의 이름을 만들 때는 대문자로 시작.
    - 복합어 일 때는 중간에 새로 시작하는 단어의 시작도 대문자로한다.
 - Camel Casing.
    - 메소드와 변수는 소문자로 시작하고 복합어의 경우는 각 단어의 시작을 대문자로 하는 것.
 - GNU Naming Convention.
    - 전부 소문자로 사용하고 복합어는 _로 구분.
 - BREW Naming.
    - 복합어는 _로 구분하고 두번째 단어의 시작부터는 대문자로 시작.
 - Hungarian Notation.
    - MS계열에서 사용하는 방법이다. ( C++ or Visual C++ )
    - 지역변수의 첫글자는 _이고 멤버 변수의 첫글자는 m_ 그리고 전역변수의 첫글자는 g_로 시작.
    - 자료형을 추가. ex ) d, n, f, b, st, ch... 등  
    - 변수의 의미를 추가.
 - Snake 표기법.
    - 상수를 표현할때는 모두 대문자로 표현하는 것.



 # 보안 ( 무조건 나오지만 어렵다 )

1. 개발 보안의 용어.
 - Social Engineering( 사회 공학 ) : 컴퓨터 보안에 있어서 인간의 상호작용은 깊은 신뢰를 바탕으로 한다는 것을 이용해서 
                                            사람들을 속여 정상 보안 절차를 깨뜨리기 위한 비 기술적 시스템침입 수단.
 - 보안의 요소
    - 인가( Authorization ) : 권한. ( 권한이 있는 사람인지 확인 )
    - 인증( Authentication ) : 합법적인 사용자인지 확인. ( 로그인 )
    - 기밀성( confientiallity ) : 시스템 내의 자원은 인가된 사용자에게만 접근이 허용되어야 한다.
    - 무결성( Integrity ) : 시스템 내의 모든 정보는 인가된 사용자만 수정해야한다.
    - 가용성( Availability ) : 인가받은 사용자는 언제라도 사용 가능.
    - 부인봉쇄( Non Repudiation ) : 송수신한 사실을 부인할 수 없도록 송수신 증거를 제공.


2. 세션 통제.
 - Session : 서버와 클라이언트의 연결을 의미한다.
 - 세션통제 : 세션의 연결과 연결로 인한 정보를 관리하는 것.
 - 세션 통제의 보안 약점.
    - 불충분한 세션 관리. ( 몇 분 이상 아무것도 안하면 로그아웃 되는 시스템 )
    - 잘못된 세션에 의한 정보 노출.


3. 입력 데이터 검증 및 표현.
 - SQL Injection.
    - 응용 프로그램에 SQL을 삽입하여 무단으로 DB를 조회하거나 조작하는 보안 약점.
    - 입력을 할 때는 SQL 예약어나 특수문자가 입력되지 않도록 해서 예방합니다.
      ( 잘못 작성했을 때 id : 진짜id, pw : 아무거나 or 1=1하면 로그인이 됨 )
 - 경로 조작 및 자원 삽입.
 - XSS( 크로스 사이트 스크립팅 ). 
    - 웹 페이지에 악의적인 스크립트를 삽입하는 공격방식.
    - 태그나 자바스크립트를 입력해서 수행하도록 한다. ( &gt, &lt; 등으로 사용하도록 함 )
 - 운영체제 명령어 삽입.
 - 위험한 형식의 파일 업로드.
    - exe파일 등을 업로드 하지 못하게 하는 것.
 - 신뢰되지 않는 URL로 자동 접속 연결.
 - 메모리버퍼 오버플로우.
    - 메모리를 많이 쓰게 만들어서 오버플로우 만드는 것.
 - 감사추적.
    - 시스템에서 이루어지는 모든 활동을 기록하고 분석하는 것.


4. 보안 점검 항목.
 - 적절한 인증없이 중요 기능 허용.
 - 부적절한 인가는 없는지.
 - 중요한 자원에 대한 잘못된 권한 설정.
 - 취약한 암호화 알고리즘을 사용하지 않았는지.
 - 중요한 정보를 평문으로 저장 및 사용했는지.
 - 하드코드된 비밀번호.
 - TOCTOC 경쟁 조건 : 검사시점이나 사용시점을 고려하지 않고 코딩했는지 확인.
 - 종료되지 않은 반복문이나 재귀함수.
 - 오류메시지를 통한 정보 노출. ( Error페이지를 꼭 따로 만들기 )
 - 오류 상황 대응 부재.
 - 부적절한 예외처리.


5. 코드 오류.
 - Null Pointer Exception.
 - 부적절한 자원 해제.
 - 해제된 자원 사용.
 - 초기화되지 않은 변수 사용.
 - Stack Guard. ( C언어에서만 나옴 - 다른 언어에서는 시작부분과 끝 부분을 지정 )


6. 캡슐화로 인한 문제.
 - 잘못된 세션에 의한 정보 노출.
 - 제거되지 않고 남은 디버그 코드.
 - 시스템 데이터 정보 노출.
 - public method에서 private 배열을 리턴.
 - private 배열에 public 데이터를 할당.


7. API 오용.
 - DNS Loockup의 의존한 보안 결정.
    - 도메인 명에 의존하여 인증이나 접근 통제 등의 보안 결정을 내리는 경우 발생하는 보안 약점.
 - 보안 문제로 사용이 금지된 API를 사용.
    - Deprecated된 API를 사용하는 것.


8. 암호화 알고리즘.
 - 암호화 알고리즘의 분류.
    - 개인키 암호화 : - 하나의 키를 이용해서 데이터를 암호화하고 복호화한다.
                          - 암호화 하는 속도나 복호화 하는 속도는 빠르지만 관리해야 할 키의 수가 많다.
                          - DES, SEED, AES, ARIA가 대표적 알고리즘.
    - 공개키 암호화 : - 암호화키는 사용자에게 공개하고 복호화할 때 사용하는 비밀키는 관리자가 비밀리에 관리.
                          - 암호화 키와 해독키가 다른 방식이다.
                          - RSA가 대표적 알고리즘.
 - 양방향 알고리즘. 
    - DES : 1974년 미국 NBS에서 발표한 개인키 암호화 알고리즘, 블록의 크기는 64비트이고 키의 길이는 56비트.
    - AES : 2001년 NIST에서 발표한 암호화 알고리즘으로 블록 크기는 128비트이며 
             키의 길이는 128, 192, 256으로 분류. ( AES 128, AES 192,... 라고 부름 )
    - RSA : 공개키 암호화 알고리즘으로 소인수 분해를 이용한 암호화 알고리즘. 
    - SEED : 1999년 KISA에서 만든 블록 암호화 알고리즘,
               블록 크기는 128비트이며 키의 길이는 128, 256으로 분류.
    - ARIA : 2004년 국가 정보원 산학 연합회가 개발한 블록 암호화 알고리즘으로 
               블록 크기는 128비트이며 키의 길이는 128, 192, 256으로 분류.
 - HASH 알고리즘.
    - 임의의 길이의 입력 데이터나 메시지를 고정된 길이의 값이나 키로 변환하는 방식.
    - SHA : 1993년에 미국 NSA가 제작한 알고리즘으로 SHA-0, SHA1, SHA2 등으로 발전.
    - MD5 : MD4를 개선한 알고리즘으로 512비트 짜리 입력 메시지 블록에
               128비트 짜리 키를 적용하는 방식.


9. 서비스 거부 공격.
 - DoS( Denial of Service ) 
    - 시스템을 악의적으로 공격해 해당 시스템의 자원을 부족하게 해서 원래 의도된 형태로 사용할 수 없도록 하는 것.
    - ping of death : - ping 명령을 사용할 때 패킷의 크기를 인터넷 프로토콜 허용 범위 이상으로 전송해서 공격.
                          - 분할되서 전송이 되는데 받은 쪽에서는 전송된 패킷을 재조립하고 
                            분할된 패킷에 ICMP PING에 대한 응답을 처리하느라 시스템이 다운됨.
    - Smurf Attack : - 인터넷 프로토콜의 브로드캐스트를 이용해서 인터넷 망을 공격하는 방식으로
                           다른 네트워크 주소로부터 생성된 것처럼 보이는 데이터를 네트워크 내의 
                           모든 IP 주소들에 전송하는 방식.
                         - 브로드캐스트 : 네트워크에 연결되 있는 모든 곳에 data를 보내는 것이다.
    - SYN Flooding Attack : - 동기화 과정에서 의도적으로 중단시켜 무한 대기 상태에 빠뜨리는 것.
    - Tear Drop : - 헤더가 조작된 패킷 조각들을 전송해서 OS를 다운시키는 방식.
                     - 데이터의 순서를 변경해서 재조립할 때 오류로 인한 과부하를 발생시키는 것.
    - LAND Attack( Local Area Network Denial Attack ) : - 공격자가 출발지 주소나 포트를 임의로 변경해서,
                                                                         출발지와 목적지가 같도록 만드는 방식.
    - DDos( Distributed Denial of Service ) : - 여러 곳의 분산된 공격 지점에서 하나의 서버에 대해
                                                         Dos 공격을 수행하는 것.
    - Smishing : - 각종 행사 안내 나 경품 안내 등의 문자 메시지를 이용해서 사용자의 개인 신용 정보를
                      빼내는 기법.
    - Spear Pising : - 사회 공학의 기법 중 하나로 일반적인 이메일로 위장한 이메일을 전송해서 
                          개인 정보를 탈취하는 공격 기법.
    - APT : - 다양한 IT 기술과 방식들을 이용해서 보안을 무력화시키고 
                정보를 수집해서 외부로 빼돌리는 방식.
    - Brute Force Attack : - 암호화된 문서의 암호화 키를 찾아내기 위해 적용 가능한 모든 값을 입력하는 방법.
    - Qshing : QR 코드를 이용해서 악성 앱을 다운로드 받게 하거나 개인정보를 탈취하는 행위.
    - SQL Injection
    - XSS( 크로스 사이트 스크립트 )
    - Sniffing : 남의 패킷 정보를 도청하는 행위.


10. 정보 보안 침해.
 - Back Door : 시스템 설계자나 관리자에 의해 고의로 남겨진 보안 허점.
 - Malware : 시스템의 보안 허점을 응용해서 고의적으로 만들어진 프로그램. ( virus )
 - C&C 서버 : 원격지에서 감염된 좀비 PC에게 명령을 내리는 서버.
 - 좀비PC : 악성 코드에 감염되어 다른 프로그램이나 컴퓨터의 조정을 받는 컴퓨터.
 - 봇넷 : 악성 코드에 감염된 컴퓨터들이 네트워크로 연결.
 - 트로이목마 : 정상적인 기능을 수행하는 프로그램으로 위장해서 부작용을 일으키는 프로그램.
 - worm : 스스로를 복제해서 시스템의 부하를 증가시키는 프로그램.
 - 랜섬웨어 : 사용자의 동의없이 컴퓨터에 설치되어 컴퓨터 시스템을 감염시키고 파일을 인질로 잡아 
                몸값을 요구하는 소프트웨어.
 - Zero Day Attack : 이미 발견된 보안 취약점이 널리 알려지기 전에 해당 취약점을 통해서 이루어지는
                          보안 공격.
 - Key Logger Attack : 컴퓨터 사용자의 키보드 움직임을 탐지해서
                             개인의 중요한 정보를 몰래 빼가는 해킹 공격.


11. 보안 통신 규약.
 - IPSec : 인터넷 상에서 주고받는 패킷을 암호화하는 방식.
 - SSL : OSI 4계층( Transport Layer )에서 네트워크에 통신 보안을 제공하기 위해 설계된 보안 규약.
 - S-HTTP : 웹 상에서 네트워크 트래픽을 암호화하는 주요 방법 중 하나이다.
 - 데이터 익명화 : 개인 식별 정보를 삭제하거나 수정하는 처리 기술.


12. 인증.
 - 유형으로는 지식 기반 인증, 소유 기반 인증, 생체 기반 인증, 행위 기반 인증, 위치 기반 인증 등이 있음.


13. Log
 - 시스템 사용에 대한 모든 내역을 기록해 놓은 것.


14. 보안 솔루션
 - FireWall( 방화벽 ) : 외부로부터 내부 망을 보호하기 위한 네트워크 구성요소 중 하나.
    - ACL : 객체에 대한 액세스 권한이 부여된 사용자와 프로세스 또는 조작을 지정해놓은 리스트.
    - White List : 식별된 실체들이 사용할 수 있는 권한을 허가하는 목록.
    - Black List :  권한을 허용하지 않는 목록.
 - Proxy : 클라이언트가 외부에 직접 접속하는 것이 아니라 현재 네트워크의 서버를 이용해서
            접근할 수 있도록 해주는 소프트웨어.
 - IDS( 침입 탐지 시스템 ) 
 - IPS( 침입 방지 시스템 ) 
 - Web FireWall ( 웹 방화벽 )
 - VPN( 가상 사설망 ) : 사용자가 다른 네트워크에 회선을 자신의 회선처럼 사용하도록 구축하는 것.
 - NAC 
 - ESM : 로그 관리를 해주는 보안 솔루션.
 
 
 
 # 응용 SW 기초 기술 활용. ( IP 관련 모든 분야 )

1. 운영체제 
 - 컴퓨터 시스템의 자원들을 효율적으로 관리하고 사용자가 편리하게 사용할 수 있도록 환경을 제공하는 프로그램.
    - 운영체제 목적 : - 처리능력 : 단위 시간내에 처리하는 일의 양.
                          - 반환시간 : 작업을 의뢰한 시간으로부터 처리가 완료될 때 까지 걸린 시간.
                          - 사용가능도 : 시스템을 사용할 필요가 있을 때 즉시 사용 가능한 정도.
                          - 신뢰도 : 시스템이 주어진 문제를 정확하게 해결하는 정도.
    - 어플리케이션의 성능 지표 : - 처리능력
                                        - 응답시간 : 작업을 처리하기 시작해서 응답이 오는데 까지 걸린 시간.
                                        - 경과시간 : 작업을 요청해서 응답하는데 까지 걸리는 시간. ( 처음부터 끝까지 )
                                        - 자원사용률     
    - 운영체제의 구성 : - Kernel : 운영체제의 핵심으로 하드웨어를 관리하는 부분.
                            - Shell : 사용자와의 인터페이스, 사용자의 명령을 인식해서 
                                       명령을 수행하도록 하는 명령어 해석기.
                            - Utility : 사용자의 편리성을 위해 제공되는 소프트웨어. ( 없어도 사용가능 )
    - 환경변수 : - 시스템 소프트웨어의 동작에 영향을 미치는 동적인 값들의 모임.
                   - PATH : 셸에서 명령어를 입력했을 때 찾는 위치.
    - 명령어 : - chmod : UNIX, Linux에서 파일의 허가 모드 설정하는 명령어.
                 - chmod 디렉토리여부 rwx( 소유자 ) rwx( 그룹사용자 ) rwx ( 기타 사용자 )
                 - 권한 3개를 묶어서 8진수로 표현. 권한이 있으면 1 없으면 0.
                   ex ) chmod - 751 소유자 = 모두 가능, 그룹사용자 = 읽고 실행 가능, 기타사용자 = 실행만가능.
                 - cat : 파일의 내용을 확인. 
                 - pwd : 현재 작업 디렉토리 확인.
    - 프로세스 : - 실행중인 프로그램
                   - PCB( 프로세스 제어 블록 ) : 프로세스에 대한 정보를 저장한 자료구조.
                   - 상태 : 제출 -> 접수 -> 준비 -> 실행 -> 종료
                                                         -> 준비 ( 할당된 시간이 다됨 )
                                                         -> block ( 입출력을 해야 할 필요가 생김 ) -> 준비 
                   - Context Switching( 문맥교환 ) : 어떤 프로세스가 준비상태에서 실행 상태로 전이되면
                                                            이전 프로세스의 PCB를 저장하고 새로운 프로세스의 PCB를 
                                                            읽어야 하는데 이 시간을 문맥교환이라고 한다. ( OverHead )
                   - OverHead : 작업을 하는 시간이 아니라 작업을 준비하는 시간이다. 
                   - 쓰레드 : - 독립적으로 존재할 수 없지만 독립적으로는 실행 가능한 작업의 단위.
                                - 하나의 프로세스는 하나 이상의 스레드로 구성된다.
                   - 멀티쓰레드 : - 두 개 이상의 쓰레드가 동작 중인 상태.
                                     - Critical Section : 공유 자원을 사용하는 코드 영역.
                                     - Mutual Exclusion( 상호 배제 ) : 하나의 스레드가 사용 중인 자원은 다른 스레드가
                                                                              수정하면 안된다.
                                     - Dead Lock : 결코 발생할 수 없는 사건을 무한정 기다리는 것.
                                                       Mutual Exclusion
                                                       Hold And Wait( 점유와 대기 )
                                                       Non Preemption( 비선점 )
                                                       Circular Wait( 환형 대기 )
                                     - Dead Lock 해결방안 : - 예방 : 4가지 조건 중 하나를 부정.
                                                                  - 회피 : Dead Lock이 발생할 것 같으면 작업을 수행하지 않음.
                                                                            ( 은행원 알고리즘이 대표적 )
                                                                  - 발견
                                                                  - 회복 
                                     - Semaphore : 공유 자원이 여러개 일 때 동시에 사용할 수 있는 공유 자원의 개수를 
                                                        이용해서 여러 개의 쓰레드를 실행하는 방법으로 P와 V연산을 이용.
                   - 스케쥴링 : - 선점 : 실행 중에도 제어권을 뺏어서 수행할 수 있는 방식. 
                                             ROUND ROBIN : 일정한 시간단위로 번갈아 가면서 작업을 수행.
                                             SRT : 남은 작업 시간이 짧은 것이 먼저 처리.
                                             MFQ : 작업을 수행할때마다 수행 시간을 길게 해주는 방식.
                                  - 비선점 : 실행 중에는 제어권을 뺏을 수 없는 방식. 
                                               FIFO=FCFS : 순서대로 처리.
                                               SJF : 작업 시간이 짧은 것을 먼저 처리.
                                               HRN : ( 대기시간 + 서비스시간 )/서비스시간으로 계산을 해서
                                                        숫자가 높은 것을 먼저하는 방식. 
                                               AGING : 프로세스가 자원을 기다리고 있는 시간에 비례해서
                                                          높은 우선순위를 부여하는 방식.
                                               우선순위기법 : 우선순위가 높은 것부터 처리하는 방식.
                                               기한부 스케줄링.
    - 주기억장치 : - 실행을 위해서 일시적으로 저장하는 장치.
                      - 반입 전략 : - 언제 주기억 장치로 가져올 것인지 여부.
                                      - 예상 반입 : 미리 가져욤.
                                      - 요구 반입 : 요구할때 가져옴.
                      - 배치 전략 : - 어디에 배치할 것인지 여부.
                                      - First Fit : 배치될 데이터보다 큰 첫번째 공간에 배치.
                                      - Best Fit : 배치될 데이터보다 큰 공간 중 가장 작은 공간에 배치.
                                      - Worst Fit : 가장 큰 공간에 배치.
                      - 교체 전략 : - 메모리가 부족할 때 어떤 데이터를 제거할 것인지 여부.
                      - 가상 기억 장치 : - 보조기억장치의 일부분을 주기억 장치처럼 사용하는 것. 
                                               목적은 용량확대.
                                             - 페이징 : 일정한 크기로 분할해서 사용.
                                             - 세그먼테이션 : 필요한 크기대로 분할해서 사용.
                                             - Locality : 프로세스가 실행되는 동안 주기억장치의 특정 부분을 집중적으로 
                                                           참조하는 성질로 시간 구역성과 공간 구역성이 있다.
                                             - Working Set : 일정 시간 동안 자주 참조되는 페이지의 집합.
                                             - Page Fault : 요구하는 페이지가 없는 현상.
                                             - Thrashing : Page Fault가 자주 발생해서 페이지를 교체하는 시간이 
                                                              사용하는 시간보다 길어지는 현상.
                                             - 페이지 교체 알고리즘 : - OPT : 나중에 사용되지 않을 페이지를 교체.
                                                                            - FIFO : 먼저 들어온 것을 먼저 교체.
                                                                            - LRU : 가장 오랫동안 사용하지 않은 페이지 교체.
                                                                            - LFU : 사용 횟수가 가장 적은 페이지를 교체.
                                                                            - NUR : 최근에 사용하지 않은 페이지 교체.
                                                                            - SCR : 2차 기회 알고리즘.
    - 보조 기억 장치 : - 반 영구적인 목적으로 저장하는 기억장치.
                           - 디스크 스케쥴링 : - FCFS : 먼저 요청한 것을 먼저 처리.
                                                   - SSTF : 현재 위치에서 가까운 것을 먼저 처리.
                                                   - SCAN : 진행 방향으로 가까운 것을 먼저 처리 - 엘리베이터
                                                   - C-SCAN : 한 방향으로만 진행하는 SCAN 


2. 네트워크
 - 용어.
    - Protocol : 통신 규칙 규약 약속.
    - NAT( Network Address Translation ) : 네트워크 주소 변환.
 - 통신망의 분류.
    - LAN : 근거리 통신망.
    - WAN : 광대역 통신망.
    - 인트라넷 : 인터넷 네트워크를 이용한 폐쇄적 근거리 통신망.
    - 클라우드 : 가상화된 컴퓨터의 시스템 리소스를 인터넷으로 이용해서 사용하는 통신망.
 - 인터넷 주소 체계.
    - IPv4 : 32비트 주소 체계로 8비트씩 나누어서 4개로 표현하고 '.'으로 구분.
    - IPv6 : 128비트 주소 체계로 16비트씩 나누고 16진수 4가지로 표현하고 '::'로 구분.
 - 서브넷 마스크 : 동일한 네트워크를 표현하기 위한 주소 체계.
 - 통신 방식.
    - 유니 캐스트 : 1:1 통신
    - 멀티 캐스트 : 1: Group 통신으로 화상 회의 등에 이용.
    - 애니 캐스트 : 가까운 것 1개에게 전송.
    - 브로드 캐스트 : 전체와 통신하는 방식.
 - 도메인네임.
    - 숫자로된 IP 주소를 인간이 알아보기 쉽게 하도록 문자로 변경한 주소.
    - IP주소와 도메인을 상호 변경해주는 시스템이 DNS입니다.
 - Protocal 
    - 통신 방법 또는 통신 규칙, 메시지를 전달하고 메시지가 제대로 도착했는지 확인하고 
      도착하지 않았으면 메시지를 재전송하는 방법.
    - 3요소 : - 구문 ( Syntax ) : 데이터의 형식, 부호화, 신호 레벨 등.
                - 의미 ( Semantic ) : 제어 정보.
                - 시간 ( Timinig ) : 속도 및 순서. 
    - 데이터 단위 : - PDU
                       - OSI 2계층에서는 Frame이라고하고, 3계층에서는 Packet 
                         4계층에서는 Segment라고 합니다.
                       - 역할
                       - 흐름제어 : 속도 조절.
                       - 경로제어( Routing ) : 최적의 경로를 찾아주는 작업.
                       - 다중화( Multiplexing ) : 여러 개의 신호를 하나의 회선으로 전송하는 것.
 - OSI 7계층 : - 개방형 시스템 간의 원할한 통신을 위해서 ISO에서 제안한 통신 규약.
                  - 물리계층 -> 데이터링크 -> 네트워크 -> 전송( Transport ) -> 세션 -> 표현 -> 응용 
                  - IP 3계층 : - ICMP : 오류 제어 프로토콜
                                 - ARP : IP 주소를 호스트와 연결된 네트워크의 MAC주소( 하드웨어 주소 )로 변환.
 - TCP/IP : - 인터넷 프로토콜
             - IP = 3계층 프로토콜, TCP = 4계층 프로토콜. ( 인터넷은 3,4계층 프로토콜이다 )
             - DNS
             - HTTP
             - HTTPS : 보안이 적용된 HTTP.
             - SMTP, POP3 : 이메일.
             - FTP : 파일 전송.
             - TELNET : 원격 접속.
             - SNMP : 네트워크 관리.
 - 네트워크 장비
    - 허브 : 가까운 거리를 연결하기 위한 장비.
    - 리피터 : 신호 증폭. ( 1계층 )
    - 스위치 : 브릿지와 유사한 역할로 LAN과 LAN사이를 연결. ( 2계층 )
    - 라우터 : 경로 제어 ( 가장 빠른걸 찾아줌 - 3계층 )
    - 게이트웨이 : 외부 네트워크와 연결시켜주는 장비. ( 7계층 )
    - load Balancer : 트래픽을 분산시켜 주는 장비 ( 4계층 )
 - 라우팅 프로토콜
    - IGP : - RIP : 현재 가장 많이 사용하는 프로토콜로 Hop 수가 15개로 제한. ( 잘못된 정보 )
             - IGRP : RIP의 단점을 보완한 것으로 중규모 네트워크에 사용.
             - OSPF : Hop 수에 제한이 없는 라우팅 프로토콜. 
    - EGP : 다른 게이트웨이 사이를 연결해주는 라우팅 프로토콜.
    - BGP : EGP의 단점을 보완하기 위한 프로토콜.


3. 신기술 용어.
 - AI, IoT, 클라우드, SDN, Bluetooth, RFID, NFC, Beacorn, GPS, GIS, CDN, Machine Learning( 기계 학습 ), 
   Deep Learning( 신경망 ), 강화 학습( 보상 ), 전문가 시스템( 전문가의 지식 이용 ), 
   AR( 증강 현실 - 위치기반, 카메라기반 ), VR ( 가상 현실 ), MR ( AR + VR ), Block Chain ( 분산 원장 ),
   N-Screen( 여러 단말에서 동일한 컨텐츠를 사용할 수 있도록 하는 방식 ), 
   반응형 웹( 화면 크기에 상관없이 동일한 콘텐츠를 사용할 수 있도록 하는 방식 )
   Big Data, Hadoop( 분산 컴퓨팅 플랫폼 ), Map-Reduce( 데이터가 있는 곳에서 처리한 후 결과를 합치는 방식 )
   Data Mining( 대량의 데이터를 분석해서 데이터들 사이에 내재된 상호 관계를 규명해서 패턴을 찾아내는 것 )
   데이터 웨어 하우스( 대량의 데이터 중에서 사용자가 사용할 수 있도록 변환한 데이터 )
   데이터 마트( 소규모 단일 주제의 데이터웨어 하우스 )



 # 데이터 입출력 구현.

1. Data Migration : - 운영중인 기존 정보 시스템에서 원하는 데이터를 추출하고 새로 개발할 정보 시스템에서 
                          사용할 수 있도록 변환 후 적재하는 일련의 과정.


2. 데이터베이스 : - 정의 : 저장, 통합, 공유, 운영 가능.
                      - DBMS : 데이터베이스를 관리해주는 소프트웨어로 정의, 조적, 제어 기능을 수행.
                      - 스키마 : - 데이터 구조.
                                   - External Schema : 사용자 입장에서 바라본 데이터베이스, View라고 함.
                                   - Conceptual Schema( 개념 ): 조직 전체의 관점에서 바라본 데이터베이스.
                                                                        일반적인 스키마. 
                                   - Internal Schema : 실제 저장된 데이터베이스.
                      - 데이터베이스 설계 순서 : - 요구 조건 분석 -> 개념적 설계( ER Diagram 생성 ) 
                                                          -> 논리적 설계( 트랜잭션의 인터페이스 설계 
                                                          -> 물리적 설계( 저장 구조 설계 ) -> 구현.
                      - 데이터 모델 : - 모델의 구성 요소 : 개체, 속성, 관계.
                                         - 모델링의 관점 : 데이터, 프로세스, 데이터와 프로세스의 상관 관점( CRUD 관점 ) 
                                         - 모델에 표시할 요소 : 구조, 연산, 제약조건.
                      - key : - 테이블(릴레이션)에서 하나의 행(튜플)을 구분할 수 있는 열(속성) 또는 열의 집합.
                               - Super Key : 속성의 개수에 상관없이 구별할 수 있으면 됩니다.
                               - Candidate Key( 후보키 ) : 속성의 개수가 최소인 Super Key.
                               - Primary Key( 기본키, 주키 ) : 후보키 중에서 하나 선정한 것으로 테이블 내에서 유일한 식별자.
                               - Alternate Key( 대체키 ) : 기본키가 아닌 후보키.
                               - Foreign Key( 외래키 ) : 다른 테이블에서 기본키인 속성.
                      - E-R Diagram : - 현실 세계의 데이터 구조를 도식화한 것.
                                          - 개체(릴레이션): 사각형.
                                          - 속성 : 원.
                                          - 기본키인 속성은 속성이름 아래에 밑줄을 추가.
                                          - 관계 : 다이아몬드( 마름모 )
                                          - 연결 : 선.
                      - 무결성 : - 결함이 없어야 한다. 
                                   - 개체 무결성.
                                   - 참조 무결성.
                                   - 도메인 무결성.
                      - Anomaly(이상) : - 데이터 속성의 중복이나 종속으로 인해 테이블을 조작할 때 
                                              문제가 발생하는 현상.
                                            - 삽입이상 : 삽입이 안되는 현상.
                                            - 갱신이상 : 고쳐야 할 사실은 하나인데 여러 번 고쳐야 하는 것.
                                            - 삭제이상 : 삭제할 수 없는 현상. 
                                                           ( 삭제를 하게 되면 필요한 데이터도 같이 삭제 )
                      - 함수적종속(FD) : - 어느 하나의 속성의 값이 결정되면 다른 속성의 값도 
                                               1개로 결정할 수 있으면 이 경우를 함수적 종속이라고 한다.
                                             - 아이디를 알면 이름을 1개로 결정할 수 있습니다.
                                             - 아이디는 이름을 함수적으로 종속한다라고 한다.( 아이디 -> 이름 )
                                             - 완전 함수적 종속 : 2개 이상의 속성 전부를 가져야함 종속.
                                             - 부분 함수적 종속 : 일부분만 가지고도 종속.
                                             - 이행적 함수적 종속 : A -> B, B -> C이면 A -> C를 종속 할 수 있다.
                      - 정규화( Nomalization ) : - 중복을 제거하기 위해서 테이블을 분해하는 것.
                                                      - 정규화를 하면 삽입, 삭제, 갱신의 성능은 좋아지지만 조회 성능은 나빠짐.
                                                      - 테이블을 분해하기 때문에 테이블의 데이터를 조회할 때 조인 연산이 늘어남.
                                                      - 1정규형 : 모든 속성은 원자값(쪼갤 수 없는 값)이어야 한다.
                                                      - 2정규형 : 1정규형을 만족하면서 기본키에 대해 모든 속성이 
                                                                    완전함수적 종속이어야 합니다. 부분 함수적 종속 제거.
                                                      - 3정규형 : 2정규형을 만족하면서 이행적 함수적 종속이 없어야 합니다.
                                                      - BCNF(강한3정규형) : - 3정규형을 만족하면서 
                                                                                    모든 결정자가 후보키이어야 합니다.
                                                      - 4정규형 : BCNF를 만족하면서 MVD(다치 종속)이 없어야 합니다.
                                                      - 5정규형 : 4정규형을 만족하면서 JD(조인 종속)이 없어야 합니다.
                      - Denormalization( 반 정규화 ) : - 조회 속도의 성능 향상을 위한 작업
                                                              - 정규화 원칙을 위배하는 행위로 반 정규형이라고 한다.
                                                              - 테이블을 통합, 테이블 분할, 중복 테이블을 추가. 중복 속성을 추가.
                      - 트랜잭션 : - 한번에 수행되어야 하는 논리적 작업단위.
                                      - 성질 : - Atomicity(원자성) : All or Nothing.
                                                - Consistency(일관성)
                                                - isolation(독립성)
                                                - Durabillity(지속성)
                                                - Commit
                                                - Rollback
                                                - SavePoint : Rollback 할 지점을 만드는 것입니다.
                                                - DDL과 DCL은 명령이 성공하면 자동 Commit.
                                                - 새로운 트랜잭션은 트랜잭션이 종료한 후 최초의 DML를 수행한
                                                  순간에 만들어 집니다.
                      - 인덱스 : - 데이터를 빠르게 조회하기 위해서 Key와 Pointer 쌍으로 만든 데이터구조.
                                   - 클러스터드 인덱스 : 키의 순서에 따라 데이터가 정렬되어 저장.
                                   - 넌클러스트더드 인덱스 : 데이터가 정렬되어 있지 않음.
                                   - 인덱스를 만들면 검색 속도는 빨라지지만 삽입, 삭제, 갱신 성능은 나빠지고,
                                     메모리 부담이 생김.
                      - 뷰 : 가상 테이블.
                      - 분산 데이터베이스 : - 나누어서 저장.
                                                 - 데이터 입출력 부하를 감소시켜 성능을 향상시키고,
                                                   확장성 및 가용성을 높임.
                                                 - 단점은 보안이 취약하고 비용이 증가.
                                                 - 투명성(Transparency) : 몰라도 된다.
                                                 - 위치투명성 : 사용자는 데이터가 어디에 저장되어 있는지 알 필요 없다.



 # 서버 프로그램 구현.

1. 개발 소프트웨어.
 - 요구 사항 관리 도구 : JIRA
 - 설계 및 모델링 도구 : StarUML, ERWin 등.
 - 구현 도구 : Intelli J, VSCode, CoLab( Linux의 Bash 명령을 학습 한 후 사용하는 것이 좋다 )
 - 형상 관리 도구 : Git Hub.
 - 빌드 도구 : Maven, Gradle
 - 그룹 웨어 : Jenkins, Slack
 - 소프트웨어 아키텍쳐
     - 아키텍쳐를 잘 사용하면 유지보수가 쉬워진다.
     - MVC 패턴. ( Model - View - Control )


2. 객체 지향 용어.
 - 클래스, 인스턴스, 객체.
 - 속성, 메소드, Message.
 - 캡슐화, 상속, 다형성.


3. 모듈
 - 독립적으로 존재하고 실행 가능한 작은 프로그램.
 - 모듈의 성능평가 : - 응집도 : - 모듈 안의 기능적 연관성, 높을 수록 좋다.
                                      - 기능적 응집도 : 가장 높음
                                      - 순차적응집도 
                                      - 통신적응집도
                                      - 절차적응집도
                                      - 시간적응집도
                                      - 논리적응집도
                                      - 우연적응집도 : 가장 낮음
                         - 결합도 : - 모듈과 모듈 간의 관련성, 낮을 수록 좋다.
                                      - 내용결합도 : 가장 높음
                                      - 공통결합도
                                      - 외부결합도
                                      - 제어결합도
                                      - 스탬프 결합도
                                      - 자료 결합도 : 가장 낮음
                          - Fan In : 자신을 호출하는 모듈의 수, 들어오는 화살표 개수.
                          - Fan out : 자신이 호출하는 모듈의 수, 나가는 화살표 개수.
                          - Design Pattern : - 비슷한 목적으로 사용되는 클래스의 모범 사례를 패턴으로 정리.
                                                 - 분류는 생성, 구조, 행동 패턴으로 나눔.
                                                 - GOF의 디자인 패턴.
                                                 - 생성 패턴 : 싱글톤, 팩토리, 추상 팩토리, 빌더, 프로토타입 패턴.
                                                 - 구조 패턴 : 데코레이터, Facade, Proxy, Adapter, Composite, Bridge
                                                 - 행동 패턴 : Command, Template Method, Chain Of Responsibility, 
                                                                  State, Memento, Observer, Strategy, Iterator, Visitor.



4. 서버 가상화
 - 소프트웨어 어플리케이션을 통해서 물리적 서버를 여러 개로 분리된 가상 서버로 나누는 과정.


5. Batch Program
 - 사용자와의 상호 작용 없이 일련의 작업을 묶어서 정기적으로 반복 수행하거나 정해진 규칙에 따라 일괄 처리 하는 것.
 


 # 인터페이스 구현.

1. 인터페이스.
 - 2개의 서로 다른 개체들 사이의 작업을 원할하게 할 수 있도록 해주는 것. ( 소프트웨어, 하드웨어 )


2. 내 외부 모듈 연계 방법.
 - EAI( Enterprise Application Integration ) 
    - 기업에서 운영되는 플랫폼 및 애플리케이션들 간의 정보 전달 및 연계와 통합을 하게 해주는 솔루션.
 - 구현 방법.
    - Point To Point : 중간에 미들웨어가 없는 방식.
    - Hurb & Spoke : 각각에 접점은 허브 시스템을 통해서 데이터를 전송하는 중앙 집중식.
    - Message Bus : 미들웨어를 두는 방식.
    - Hybrid : Hub방식과 Message Bus방식을 모두 사용하는 방식.
 - ESB( Enterprise Service Bus )
    - 애플리케이션 간 연계나 데이터 변환 및 웹 서비스 지원 등을 수행해주는 솔루션.
 - 인터페이스 처리 유형.
    - AJAX( Asynchronous JAvascript XML ) : 자바스크립트를 이용해서 비동기적으로 데이터를 받아오는 기술로,
                                                       데이터를 실시간으로 받아서 화면 전체를 갱싱하지 않고 일부분에만 갱신해서
                                                       새로운 데이터를 출력하는 방식.


3. 데이터 포맷.
 - XML : 태그 형식으로 데이터를 표현, 확장 마크업 언어, 태그의 해석을 브라우저가 하지 않고 개발자가 함.
 - JSON : 자바스크립트 객체 표현법으로 데이터를 표현.
 - SOAP( Simple Object Access Protocol ) : HTTP, HTTPS, SMTP 등을 통해서 XML 기반의 메시지를 교환하는 프로토콜.
 - REST( RESTful ) : - 월드 와이드 웹과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 아키텍처의 한 형식이다.
                        - 동일한 요청은 하나의 request로 처리.
                        - JSON을 이용해서 데이터를 리턴하는 방식.



 # 화면 설계.

1. UI( User Interface )
 - 사용자 인터페이스.
 - CLI : 명령어 입력.
 - GUI : 아이콘 클릭.
 - NUI : 음성이나 행동으로 조작.


2. UX( User Experience )
 - 사용자 총제적인 경험.


3. HCI( Human Computer Interation )
 - 사람이 시스템을 편리하고 안전하게 사용할 수 있도록 연구하고 개발하는 학문.


4. 감성 공학
 - 제품이나 작업 환경을 사용자의 감성에 맞도록 설계 및 제작하는 기술.



 # 자료 구조 알고리즘.

- 따로 시험범위에 적혀 있진 않지만, 공부해보기.
- Stack, Queue, Graph, Tree 등등.









