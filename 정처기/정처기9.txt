

오답처리 - 3회차.

출처 입력


1. 명령 레지스터 ( IR ) : 현재 수행 중인 명령어의 내용을 기억.

인덱스 레지스터 : 인덱스 주소 지정 시 사용되는 레지스터.

누산기 : 산술 및 논리 연산의 결과를 일시적으로 기억.


2. RISC : 명령어 축약형 CPU, 주소 지정 모드와 명령어의 종류가 적음, LOAD와 STORE로 메모리 접근.

프로그래밍이 어려우나 처리 속도가 빠름, 고성능의 워크스테이션이나 그래픽용 컴퓨터에 사용.

CISC : 명령어가 많으며 여러 주소 지정 모드를 지원, 프로그래밍이 용이하나 처리 속도가 느림.

전력 소모가 많고 생상 가격이 비싸며 설계와 구현 시 많이 시간이 필요.


9. 0 주소 형식 : 스택 구조에 사용된다.


11. 연관 기억 장치의 구성 요소 : 검색자료, 마스크 레지스터 및 일치 지시기 등이 필요함.


12. 유효 번지 = PC + 주소 부분 ( Operand ) = 상대 주소 지정.


14. PC 내에서 데이터를 이동하는데 사용하는 버스의 종류 : 데이터 버스, 어드레스 버스, 제어 버스.


15. ALU의 구성요소 : 가산기, 누산기, 상태 레지스터, 보수기, 기억 레지스터 등.


17. 계산에 의한 주소 : 주소 접근 방식 중 약식 주소 표현 방식에 해당하는 것.


20. 직접 주소 지정 : 주소 부분에 있는 값이 실제 데이터가 있는 주기억 장치 내의 주소를 나타냄.


23. 트랜잭션 ( Transaction ) : SQL 에서 데이터베이스에 대한 일련의 처리를 하나로 모은 작업 단위.


27. DROP TABLE 학과 CASCADE : 학과 테이블과 이 테이블을 참조하는 다른 테이블도 함께 제거.


37. 도스에 외부 명령어 : FORMAT, DISKCOPY 등등.


42. cat : Linux에서 파일의 내용을 화면에 출력할 때 사용하는 명령어.


46. 선점 스케줄링 : RR, SRT, MFQ.


48. CONFIG.SYS : Root 디렉토리에 존재해야 한다.


49. 디렉토리 조작 명령어 : cd, mkdir 등.


51. 라디오 방송에 이용하는 통신 매체 : 전자파.


52. 최소해밍거리 : D >= 2A+1.



명령어 - 복습

출처 입력



# 명령어의 구성.


코드부 ( OP - Code ) + 주소부 ( Operand : 번지부 ) 로 구성.



# OP - CODE


연산부라고 하며, 수행해야 할 동작을 명시.

명령어 형식에서 첫 번째 바이트부터 저장.

연산부의 크기는 표현할 수 있는 명령어의 종류를 나타내는 것. 4bit = 2**4 = 16개의 명령어를 사용.




# 번지부 Operancd.


찾아갈 메모리의 번지 부분이나 레지스터를 지정.



# 연산자 OP - Code 기능.


1. 함수 연산 기능

- 산술 및 논리 연산을 담당.


2. 전달 기능.

- 중앙 처리 장치와 주기억 장치 간의 정보 이동을 담당. ( Load , Store )


3. 제어 기능.

- 프로그램 순서의 분기 명령을 담당.


4. 입출력 기능.

- 입출력 포트를 통한 입력이나 출력을 담당.




# 명령어 형식.


1. 0 - 주소 형식 ( 스택 구조 )

- 명령어 주소부 없이 데이터가 명령어 자체에 있는 방식.

- 연산 속도가 가장 빠름.


2. 1 - 주소 형식 ( 누산기 구조 )

- 주소부가 하나 존재.

- 데이터의 처리를 위해 누산기 구조의 컴퓨터에서 사용.


3. 2 - 주소 형식 ( 범용 레지스터 구조 )

- 주소부가 2개인 가장 일반적인 형식.

- 연산 후 입력 데이터의 값은 보존이 되지 않는다.

- 원래 결과는 주소 1에 기억되므로 이전에 기억되어 있던 내용은 연산 후에 지워짐.


4. 3 - 주소 형식 ( 범용 레지스터 구조 )

- 명령어에 주소부가 3개 존재하므로 원래의 값이 보존됨.

- 이해하기는 쉬우나 기억 장소를 많이 창지함.




# 접근 방식에 의한 주소 지정 방식.


1. 묵시적 주소 지정 ( Implied Addressing )

- 주소 부분이 묵시적으로 정해져 있는 방식으로 주로 누산기를 사용하여 연산을 수행.


2. 즉시 주소 지정 ( Immediate Addressing )

- 명령어 주소 부분에 있는 값 자체가 실제의 데이터가 되는 구조.

- 메모리 참조 횟수 : 0회.


3. 직접 주소 지정 ( Direct Addressing )

- 주소 부분에 있는 값이 실제 데이터가 있는 주기억 장치 내의 주소를 나타냄.

- 메모리 참조 횟수 : 1회.


4. 간접 주소 지정 ( Indirect Addressing )

- 명령어의 주소 부분으로 지정한 기억 장소의 내용이 실제 데이터가 있는 곳의 주소로 사용됨.

- 메모리 참조 횟수 : 2회 이상.



# 계산에 의한 주소 지정 방식.


데이터가 기억될 위치를 명령어의 주소 부분에 있는 값과 특정 레지스터에 기억된 값을 더해서 지정하는 방식.

프로그램 카운터 ( PC ), 인덱스 레지스터, 베이스 레지스터, 상대 주소 지정.




# 실제 기억 장소와 연관성이 있는 주소 지정 방식.


1. 절대 번지.

- 기억 장치의 고유의 번지로서 16진수로 약속하여 순서대로 정해 놓은 번지.

- 기억 장소를 직접 숫자로 지정하는 주소로서 기계어 정보가 기억되어 있는 곳.


2. 상대 번지.

- 별도로 지정된 번지를 기준으로 하여 상대적으로 나타내는 번지.

- 상대 번지를 기준 번지에 더하면 해당 위치의 절대 번지를 구할 수 있음.



# 제어장치의 제어 방식


1. Major State.

- CPU 상태를 표시.

- 기계 사이클 : 하나의 명령을 CPU가 기억 장치로부터 인출하거나 실행하는데 걸리는 시간을 의미.

인출 사이클과 실행 사이클로 이루어진 사이클.

- 명령 사이클 : 한 명령의 실행 과정이 하나 이상의 머신 사이클로 이루어지는 사이클.


2. 인출 사이클 ( fetch cycle ) : 주기억 장치로부터 CPU로 명령어를 가져오는 사이클.


3. 간접 사이클 ( Indirect Cycle ) : 명령어를 가져오면 피연산자를 옮겨와야 되는데,

간접 주소 지정이 허용되는 경우 기억 장치를 한 번 더 접근하는 사이클.


4. 실행 사이클 ( Execute Cycle ) : 인출도니 명령어를 이용하여 직접 명령을 실행하는 사이클.


5. 인터럽트 사이클 ( Interrupt Cycle ) : 인터럽트가 발생했을 때 처리하는 사이클.


6. 명령어 인출 절차.

- 명령 계수기의 값 -> 번지 레지스터로 이동.

- 주기억 장치에서 명령어 인출.

- 명령 계수기 증가.

- 명령 코드 -> 명령 레지스터로 이동.




date 210622

﻿