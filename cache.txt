# Cache

cache          Server에 있는 data를 Web browser에서 처음 읽어올때 data를 cache로 저장해서 
               다음번에 server에 data를 불러오면 reload하지 않고 cache를 사용해서 빠르게 data를 처리 할 수 있다.


cache 관련 명령어들. (response Header에 표시된다)

Header set Cache-Control "no-store"                 cache를 저장하지 않는다. 
Header set Cache-Control "no-cache"                 server에 data가 수정되면 바로 cache를 갱신해준다.
Header set Cache-Control "max-age=0"                no-cache와 같은 의미이다.
Header set Cache-Control "max-age=31536000"         Cache에 Expiration값을 정해준다.


# cache 문제점.

Web에 내용을 수정해도 Cache의 수명이 다해서 새로 reload하지 않으면 client는 바뀐 내용을 알 수 없다.


# Last Modified

마지막으로 file을 load한 시간.

Web에서 Last Modified 역할.

1. cache를 최신화 해야 될때 client가 server에게 data에 수정된 부분이 있는지 물어본다. (if modified since)
2. server는 Response Header와 Request Header의 last modified를 확인해본다.
3. 둘이 같다면 수정된 부분이 없다고 말해준다.
4. cache를 그대로 사용한다.


# ETag

Server의 data와 client가 저장하고 있는 cache의 값이 같은지 확인해준다.
( if-non-match )

Last modified와 Etag 둘 중 하나라도 맞지 않으면 cache는 갱신된다.


# intermediate cache

Client와 Server사이에 caching server가 있어서 cache를 caching server에서 저장해서 빠른 loding이 가능하다.


# 더 공부할 Keyword.

Offline Application             
Prograssive Web Application     
Application Cache               인터넷이 끊겨도 사용가능한 web
Caching Server                  Server측에 Cache  ex) Memcached
Content Delivery Network        CDN 여러 Caching Server를 통해 고속으로 Web을 연결할 수 있도록 도와준다.