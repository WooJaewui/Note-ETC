
 통합 구현.



 # 통합구현.

통합구현.
사용자의 요구사항에 맞춰 송-수신 모듈과 중계 모듈 간의 연계를 구현하는 것.

송신 시스템과 모듈.
송신시스템은 데이터를 생성 및 변환하여 전송하는 시스템으로 송신 모듈과 모니터링 기능으로 구성.
송신 모듈은 전송 데이터를 생성하고 필요에 따라 전송 데이터의 변환 등을 수행.
모니터링 기능은 데이터의 생성부터 송신까지의 과정과 송신 상태 등을 확인.

수신 시스템과 모듈.
수신시스템은 수신 받은 데이터를 정체 및 변환하는 시스템으로 수신모듈, 모니터링 기능으로 구성.
수신 모듈은 수신 데이터를 정제하고 데이터를 변환하는 작업 등을 수행.

중계 시스템.
내-외부 시스템 간 또는 내부 시스템 간의 연계 시 사용되는 아키텍처.

연계 데이터.
송-수신 시스템 간 송-수신되는 데이터로 연계 데이터에는 속성, 길이, 타입 등이 포함.

네트워크.
송신 시스템, 수신 시스템, 중계 시스템을 연결 해주는 통신망.



 # IPC.

IPC Inter-Process Communication.
모듈이나 프로세스 사이에 서로 데이터를 주고받는 행위 또는 그에 대한 방법이나 경로.

구현 방식.
파일, 신호, 소켓, 메시지 큐, 파이프, 세마포어, 공유 메모리, 메시지 전달, 메모리 맵 파일 등.



 # 연계 요구사항 분석.

연계 요구사항 분석.
통합 구현을 위해 사용자 요구사항을 분석하고 표준화하여 연계 데이터를 정의하는 것.

연계 요구사항 분석 시 입력물.
시스템 구성도 : 송-수신 시스템의 네트워크, 하드웨어, 시스템 소프트웨어 구성.
응용 애플리케이션 구성 : 송신 측에서 연계 데이터가 발생하는 응용 애플리케이션의 구성 확인.
엔티티 관계도( ERD ) : 데이터 모델링 기술서, 데이터 정의서, 데이터 형식 등을 확인.

FGI Focus Group Interview.
사용자 면담 또는 시스템 관리자 및 서비스 활용자와 같은 핵심 그룹 면담.

체크리스트 Checklist.
연계 데이터와 연계 시스템 아키텍처 정의를 위해 다각도의 관점에서 고려 사항 점검 및 확인.

설문지 및 설문 조사.
서비스 활용 목적에 따라 연계가 필요한 데이터를 식별하고 자료를 수집.

연계 데이터 식별 및 표준화.
연계 데이터를 구성하기 위해 연계 데이터를 식별하고 표준화한 후 정의서를 작성하는 과정.

연계 데이터 식별 및 표준화 절차.
연계 범위 및 항목 정의 : 연계할 정보를 상세화하여 정의.
연계 코드 변환 및 매핑 : 연계 정보 중 코드로 관리되어야 할 항목을 찾아 코드로 변환.
연계 데이터와 변경 구분 추가 : 연계 데이터 확인 및 모니터링을 위해 관리 정보를 추가함.
연계 데이터 표현 방법 정의 : 연계 대상 범위 및 항목과 코드 변환 및 매핑 방식을 정의.
연계 정의서 및 명세서 작성.



 # 연계 메커니즘.

연계 데이터 표준 항목.
인터페이스 표준 항목은 송-수신 시스템을 연계하는데 표준적으로 필요한 데이터.

연계 메커니즘.
데이터의 생성 및 전송을 담당하는 송신체계와 데이터 수신 및 DB반영을 담당하는 수신체계로 구성.
송-수신 시스템 사이에는 시스템 현황을 모니터링하는 중계 시스템을 설치.
직접 연계 방식과 간접 연계 방식이 있다.

직접 연계 방식.
중간 매개체 없이 송-수신 시스템이 직접 연계하는 방식.

직접 연계 방식 장점.
연계 및 통합 구현이 단순.
데이터 연계처리 성능이 우수.
개발 비용이 저렴.
개발 기간이 짧음.

직접 연계 방식 단점.
시스템 변경 시 오류가 발생할 수 있음.
암호화와 복호화가 어려움.
비지니스 로직을 적용하기 어려움.
연계 및 통합이 가능한 시스템 환경이 제한적.

직접 연계 방식 구현 방식.
DB Link : 데이터베이스의 링크를 제공.
DB Connection Pool( WAS ) : WAS가 데이터베이스 연결을 제공.
JDBC : Java에서 데이터베이스에 접근하기 위한 API.
화면 링크 : Web Application 화면에서 하이퍼링크 이용.
Open API : 데이터를 읽어서 제공하는 인터페이스.

간접 연계 방식.
송-수신 시스템 사이에 중간 매개체를 두어 연계하는 방식.

간접 연계 방식 장점.
서로 다른 네트워크, 프로토콜 등 다양한 환경의 연계 및 통합이 가능.
송-수신 시스템 간 인터페이스가 변경되어도 오류 없이 서비스 가능.
보안 품질 보장과 비지니스 로직을 쉽게 반영.

간접 연계 방식 단점.
연계 메커니즘이 복잡.
중간 매개체로 인한 성능 저하.
개발 및 적용 기간이 길어짐.

간접 연계 방식 구현 방식.
연계 솔루션 : EAI 서버와 송-수신 시스템에 설치되는 클라이언트를 이용하는 방식.
ESB( Enterprise Service Bus ) : 표준 기반의 인터페이스를 제공하는 방식.
Socket : 서버는 통신을 위한 소켓을 생성하여 포트를 할당하고 연결하여 통신하는 네트워크 기술.
Web Service : 웹 서비스에서 WSDL과 UDDI, SOAP 프로토콜을 이용하여 연계하는 방식.



 # 연계 장애 및 오류처리 구현.

장애 및 오류의 확인과 처리 절차.
1차적으로 연계 서버에서 제공하는 모니터링 화면을 통해 오류 원인 및 발생 현황을 확인.
오류 로그 테이블 또는 파일을 확인하여 오류 원인을 분석.
오류가 확인되면 적절한 조치를 취한다.

관리 대상의 장애 및 오류 코드와 메시지.
식별한 오류 내용을 주제별로 분류한 후 각 오류 내용에 코드를 부여하고 오류 메시지를 정의.

장애 및 오류 코드와 메시지 관리 방식.
테이블 관리 방식 : 관리 대상 오류 코드와 오류 메시지가 많은 경우 사용.
파일 관리 방식 : 오류 코드와 오류 메시지가 적은 경우 사용.

RPO Recovery Point Objective - 목표 복구 시점.
장애 발생 시 비즈니스 연속을 위해 어느 시점으로 백업할지 결정하게 될 지표.

RTC Recovery Time Objective - 목표 복구 시간.
장애 발생 시 시스템을 원상태로 복원하는데 소요하는 시간.

RlO Recovery location Objection ) - 목표 복구 위치.
전통적으로 데이터 백업은 테이프에 기록했다.
최신의 트렌드는 디스크에 백업하거나 클라우드를 활용하여 백업하는 것이다.

RLO Recovery Level Objective ) - 목표 복구 레벨( 수준 )
OS, 파일 데이터, 데이터베이스, 애플리케이션 수준으로 나누어 어느 수준으로 복구할지 결정.



 # 연계 데이터 보안.

연계 데이터 보안.
송신 시스템에서 수신 시스템으로 전송되는 연계 데이터는 보안에 취약.

전송 구간 보안.
전송되는 데이터나 패킷을 쉽게 가로챌 수 없도록 암호화 기능이 포함된 프로토콜 사용.
가로채더라도 내용을 확인할 수 없게 데이터나 패킷을 암호화.

데이터 보안.
데이터를 운영 DB에 반영할 때 데이터를 암 - 복호화 하는 것.
연계 데이터의 중요도에 따라 암복호화 대상을 결정한다.

암호화 알고리즘.
단방향과 양방향 알고리즘.



 # 연계 모듈의 구현 환경.

연계 모듈의 구현 환경.
연계 모듈의 구현 환경 연계 메커니즘에 따라 구현된 연계 시스템 환경 및 모듈 구현 환경.

EAI Enterprise Application Integration.
기업 내 각종 애플리케이션 및 플랫폼 간의 정보 전달, 연계, 통합 등 상호 연동하는 솔루션.
Poin - to - Point : 1:1 방식.
Hub & Spoke : 허브 시스템을 통해 데이터를 전송하는 중앙 집중형.
Message Bus : 애플리케이션 사이에 미들웨어를 두어 처리하는 방식.
Bus Hybrid : Hub & Spoke와 Message Bus의 혼합 방식.

ESB Enterprise Service Bus.
애플리케이션 간 연계, 데이터 변환, 웹 서비스 지원 등 표준 기반의 인터페이스를 제공하는 솔루션.
EAI보다 서비스 중심의 통합을 지향한다.

Web Service.
네트워크 정보를 표준화된 서비스 형태로 만들어 공유하는 기술로 서비스 지향 아키텍처 개념의 기술.
SOAP( Simple Object Access Protocol ) : XML 기반의 메시지를 네트워크 상에서 교환하는 프로토콜.
UDDI( Universal Description, Discovery and Integration ) : WSDL을 등록하여 서비스, 제공자를 접근.
WSDL( Web Service Description Language ) : 웹 서비스에 대한 상세 정보를 XML 형식으로 구현.



 # 데이터 포맷.

XML eXtensible Markup Language.
웹 브라우저 간 HTML 문법이 호환되지 않는 문제와 SGML의 복잡함을 해결하기 위한 마크업 언어.
유니코드를 기반으로 다국어를 지원.

CSV Comma-Separated Values.
구분자로 구분한 텍스트.

JSON JavaScript Object Notation.
속성-값 쌍으로 이루어진 데이터 객체를 전달하기 위해 사람이 읽을 수 있는 텍스트를 사용하는 포맷.



 # 통신 규약.

SOAP Simple Object Access Protocol.
XML 기반의 메시지를 컴퓨터 네트워크 상에서 교환하는 프로토콜로 기본적인 메시지를 전달하는 기반.

WSDL Web Service Description Language.
웹 서비스의 구체적 내용이 기술되어 있어 서비스 제공 장소, 서비스 메시지 포맷, 프로토콜 등을 기술.

RESTful.
SOAP나 쿠키를 통한 세션 트랙킹 같은 별도의 전송 계층 없이 전송하기 위한 아주 간단한 인터페이스.

링크드 데이터( Linked Data ).
데이터를 URI로 식별하고 URI에 링크 정보를 부여함으로써 상호 연결된 웹을 지향하는 모형이다.



 # 미들 웨어.

미들웨어.
미들과 소프트웨어의 합성어로, 운영체제와 응용 프로그램 사이에서 추가적인 서비스를 제공하는 소프트웨어.

DB DataBase.
클라이언트에서 원격의 데이터베이스와 연결하기 위한 미들웨어.

RPC Remote Procedure Call.
응용 프로그램의 프로시저를 사용하여 원격 프로시저를 마치 로컬 프로시저처럼 호출하는 미들웨어.

MOM Message Oriented Middleware.
메시지 기반의 비동기형 메시지를 전달하는 방식의 미들웨어.

TP-Monitor Transaction Processing Monitor.
트랜잭션을 처리 및 감시하는 미들웨어.
사용자 수가 증가해도 빠른 응답 속도를 유지해야 하는 업무에 주로 사용.

ORB Object Request Broker.
객체 지향 미들웨어로 코바 표준 스펙을 구현한 미들웨어.

WAS Web Application Server.
동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어.



 # 연계 테스트.

연계 테스트 절차.
연계 테스트 케이스 작성 - > 연계 테스트 환경 구축.
- > 연계 테스트 수행 - > 연계 테스트 수행 결과 검증.




















