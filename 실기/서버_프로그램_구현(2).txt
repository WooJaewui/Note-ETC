
 서버 프로그램 구현(2) - 마무리.



 # 소프트웨어 디자인 패턴 Software Design Pattern.

디자인 패턴.
비슷한 목적으로 사용되는 클래스의 모범 사례를 패턴으로 정리한 것.
GoF 디자인 패턴이 유명하다.

디자인 패턴의 분류.
객체의 생성에 관한 패턴.
프로그램의 구조에 관한 패턴.
객체의 행동에 관한 패턴.

디자인 패턴의 장점.
재사용성이 높고 유연성 있는 설계가 가능.
의사소통이 원할하다. ( 이런 디자인 패턴을 만들어! )
설계의 수준을 높일 수 있다.



 # 객체 생성과 관련된 패턴.

싱글톤 패턴.
하나의 객체만 생성할 수 있는 디자인 패턴.

Factory 패턴.
객체 생성을 자신의 생성자를 호출하지 않고 하위클래스의 메소드를 이용해 생성하는 패턴.
프레임워크 객체 생성이 주로 이 패턴을 이용 - URLConnection 클래스가 대표적이다.

추상 팩토리 패턴.
동일한 주제의 다른 팩토리를 묶어주는 패턴.

빌더 패턴.
작게 분리된 인스턴스를 조합항 객체를 생성하는 패턴.
생성과 표기를 분리해 복잡한 객체를 생성.

프로토타입 패턴.
기존 객체를 복제함으로써 객체를 생성.



 # 구조와 관련된 패턴.

Decorator Pattern.
생성자에서 필요한 기능을 매개변수로 넘겨받아서 구현.
I / O 패키지의 클래스들이 많이 사용.

Facade Pattern.
간략화 된 인터페이스를 제공하는 객체.
공통적인 작업에 대해 간편한 메소드들을 제공한다.

Proxy Pattern.
다른 무언가와 이어지는 인터페이스의 역할을 하는 클래스이다.

Adapter Pattern.
현재 구현된 인터페이스의 메소드를 통해서 상속받은 클래스의 메소드를 호출하는 패턴.

composite pattern.
재귀적 구조를 쉽게 처리하기 위한 패턴.

Bridge pattern.
기능과 구현을 두 개의 별도 클래스로 구현.

Flyweight pattern.
유사한 객체들 사이에 많은 데이터를 서로 공유하여 메모리 사용량을 최소화하는 패턴.



 # 행동과 관련된 패턴.

Command Pattern.
요청을 객체의 형태로 캡슐화하여 사용자가 보낸 요청을 나중에 이용할 수 있도록 정보를 저장.

템플릿 메소드 패턴.
알고리즘의 골격을 미리 정의해두고 하위 클래스에서 필요한 부분만 재정의 해서 사용하는 패턴.

Chain of responsibility.
책임들이 연결되어 있어 내가 책임을 못 질 것 같으면 다음 책임자에게 자동으로 넘어가는 구조.

State Pattern.
동일한 동작을 객체의 상태에 따라 다르게 처리해야 할 때 사용하는 패턴.

Memento Pattern.
클래스의 설계 관점에서 객체의 정보를 저장하는 패턴.

Observer Pattern.
주기적으로 상태가 변환하는 인스턴스의 상태를 감지하여 처리해야 할 때 사용하는 패턴.

Strategy Pattern.
공통된 부분과 다른 부분을 분리시켜 객체를 생성할 때 서로 다른 부분을 추가하는 구조.

Interpreter Pattern.
문법 규칙을 클래스화 한 구조를 갖는 SQL 언어 같은 것을 개발할 때 사용.

Iterator Pattern.
반복이 필요한 자료구조를 모두 동일한 인터페이스를 통해 활용할 수 있도록 해주는 패턴.

Visitor Pattern.
visitor 클래스를 만들고 해당 클래스의 메소드가 각 클래스를 돌아다니며 작업을 수행하는 패턴.

Mediator Pattern.
클래스간의 상호작용을 캡슐화하여 한 클래스에서 처리하는 디자인 패턴.



 # 업무 프로세스 확인.

프로세스.
개인이나 조직이 한 개 이상의 정보 자원의 입력을 통해 산출물을 제공하는 활동들의 집합.

프로세스 구성 요소.
프로세스 책임자( Owner ).
프로세스 맵( Map ).
프로세스 Task 정의서.
프로세스 성과 지표.
프로세스 조직.
경영자의 리더쉽( Leadership ).



 # 개발 지원 도구.

IDE Integrated Development Environment.
개발에 필요한 편집기, 컴파일러, 디버거 등의 다양한 툴을 하나의 인터페이스 통합해서 제공하는 환경.
Eclipse, Visual Studio, Android Studio 등.

빌드 도구.
Ant, Maven, Gradle.



 # Server Application

구성.
Repository : 데이터 저장소.
Domain Class( DTV , VO ) : 저장소에서 가져온 또는 저장할 데이터를 표현하기 위한 클래스.
SQL.
DAO : 저장소와의 작업에 사용할 클래스.
Service : 비지니스 로직을 처리할 클래스.
Controller : 사용자의 요청을 처리할 로직과 결과를 출력할 뷰를 연결시켜 주는 클래스.



 # Server.

서버 이중화.
동일한 기능을 갖는 서버를 여러 계층으로 구성하는 것.

서버 이중화의 목적.
Failover( 시스템 대체 작동 ) : 클론 서버를 가지고 있다가 사용 서버 장애시 클론 서버를 실행.
LoadBalance( 부하 균형 ) : 두 개 이상의 서버가 일을 분담처리해 부하를 분산시켜주는 것.

서버 가상화.
물리적 서버를 여러 개로 분리도니 고유한 가상 서버로 나누는 과정.

서버 가상화 장점.
서버 가용성 증가.
운용 비용 절감.
서버 복잡성 제거.
애플리케이션 성능 향상.



 # Framework.

프레임워크.
효율적인 정보 시스템 개발을 위한 코드 라이브러리.

프레임워크 특징.
모듈화( Modularity ) : 인터페이스에 의한 캡슐화를 통해 뮤돌화를 강화한다.
재사용성( reusability ) : 반복적으로 사용할 수 있는 컴포넌트를 정의할 수 있게 하여 재사용성을 높인다.
확장성( extensibility ) : 다형성을 통해 어플리케이션이 프레임 워크의 인터페이스를 확장할 수 있게 한다.
제어의 역흐름( inversion of control ) : 특정한 이벤트가 발생할 때 제어가 거꾸로 흐르게 된다.

대표적인 프레임워크.
Java - Spring, Javascript - node.js , Python - Django, Ruby - Rails.



 # DBMS.

DBMS 접속 기술.
JDBC : Java 데이터베이스 연동 기술.
ODBC : Windows에서 데이터베이스를 사용하기 위한 연동 기술.

데이터베이스 병행 수행.
크러스터링 : 두 대 이상의 서버를 하나의 서버처럼 운영하는 기.



 # 개발 보안.

소프트웨어 개발 보안.
보안 취약점을 최소화하고 사이버 보안 위협에 대응할 수 있는 안전한 SW를 개발하기 위한 보안 활동.

소프트웨어 개발 보안 가이드.
세션 통제 : 세션의 연결과 연결로 인해 발생하는 정보를 관리.
입력 데이터 검증 및 표현.
보안 기능.
에러 처리.
코드 오류.
캡슐화.
API 오용.



 # 서버 프로그램 테스트.

개념.
구현된 어플리케이션이나 시스템에 대한 요구 사항이 만족되었는지 확인하기 위한 활동.

소프트웨어 테스트의 원칙.
자신이 개발한 프로그램 및 소스코드를 테스팅하지 않는다.
효율적인 결함 제거 법칙 사용한다.
완벽한 테스트는 불가능하다.
테스트는 계획 단계부터 하는게 맞다.

소프트웨어 테스트의 원칙.
살충제 패러독스 : 동일한 테스트 케이스로 반복 실행하면 더 이상 결함을 발견할 수 없다.
오류-부재의 궤변 : 사용자 요구 사항을 만족하지 못하면 오류를 제거해도 품질이 높다고 할 수 없다.



 # Batch program.

배치프로그램.
일련의 작업들을 작업 단위로 묶어 일괄 처리 하는 것.

배치 프로그램의 필수 요소.
대용량의 데이터를 처리할 수 있어야 한다.
자동화 : 심각한 오류 상황 외에는 사용자의 개입 없이 동작해야 된다.
견고성 : 유효하지 않은 데이터도 처리해서 동작 중단이 발생하지 않아야 한다.
안정성 : 어떤 문제가 생겼는지, 언제 발생했는지 등을 추적할 수 있어야 한다.
성능 : 주어진 시간 내에 처리할 수 있고, 다른 어플리케이션을 방해하지 말아야 한다.

배치 스케쥴러.
일괄처리를 위해 주기적으로 발생하거나 반복적으로 발생하는 작업을 지원하는 도구.
Spring batch, Quartz 스케쥴러, Cron 등이 있다.

배치 프로그램 테스트.
디버그 또는 디버깅으로 논리적인 오류를 찾아 내는 과정이다.



 # 형상관리 Software Configuration Management.

형상관리.
소프트웨어의 개발 과정에서 발생하는 산출물의 변경 사항을 버전 관리하기 위한 활동.

특성.
소프트웨어 변경사항을 파악하고 제어하여 적절히 되고 있는지 파악하여 통보하는 작업.
유지 보수 단계에서 수행되는 활동.

형상관리 절차.
형상 식별 : 형상관리 대상을 식별하여 이름 관리 번호 등을 부여하는 활동.
변경 제어 : 식별된 형상항목의 변경 요구를 검토하고 통제하는 활동.
형상 상태 보고 : 현재 상태 및 변경 항목들이 제대로 변영되는지 여부를 보고 하는 활동.
형상 감사 : 무결성 평가, 검증 과정을 통해 공식적으로 승인하는 작업.
















