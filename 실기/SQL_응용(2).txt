
 SQL 응용(2) - 마무리.


 # 그룹 함수.

그룹함수.
SUM( COLUMN ) : 그룹화 된 COLUMN의 누적 합계를 반환.
AVG( COLUMN ) : 그룹화 된 COLUMN의 평균을 반환.
COUNT( COLUMN ) : 그룹화 된 COLUMN의 총 갯수를 반환.
MAX( COLUMN ) : 그룹화 된 COLUMN의 최대값을 반환.
MIN( COLUMN ) : 그룹화 된 COLUMN의 최소값을 반환.

주의사항.
그룹화 한 이후에 사용해야 하기 때문에 HAVING, SELECT, ORDER BY에서 사용가능. ( group by 이후 )
NULL은 제외하고 계산한다. ( 다른 연산자, 함수와 다르게 NULL이 있어도 연산은 가능하다 )



  # group by 절.

설명.
특정 컬럼 값을 기준으로 그룹화 하고자 하는 경우 사용한다.
group by 절 뒤에 해당 컬럼을 기술하는데, 컬럼의 별칭을 사용할 수 없다.




 # JOIN.

JOIN.
원하는 정보가 두 개 이상의 테이블에 나누어져 있을때 JOIN을 통해 한 번의 SQL로 질의 가능.

용어.
EQUI JOIN : 조인 대상이 되는 두 테이블에 동일한 의미를 갖는 컬럼의 값이 일치되는 행을 연결.
NON EQUI JOIN : where 절에 조인 조건을 = 연산자 이외의 다른 연산자를 사용하는 경우.
SELF JOIN : 자기 자신의 테이블을 조인 하는 것을 의미한다. ( 하나의 콜롬이 자기 자신의 콜롬을 참조 )
ANSI JOIN : FROM 다음에 JOIN이란 단어를 사용하여 조인하는 방식을 의미한다.

종류.
CROSS JOIN( CATESIAN PRODUCT ) : FROM 절에 테이블 명을 기술한 것으로 JOIN 조건이 없다. 
INNER JOIN : 관계가 설정된 두 테이블에서 조인된 필드가 일치하는 행만을 표시.
OUTER JOIN : LEFT, RIGHT outer join이 있고, 조건에 만족하지 않는( NULL ) 튜플도 결과로 출력한다.

CROSS JOIN.
select * from emp, dept ;( 열은 더하고, 행은 곱한 값 출력 )
select * from emp cross join dept ;

INNER JOIN.
select * from emp, dept where emp.deptno = dept.deptno ; 
select * from emp inner dept on emp.deptno = dept.deptno ;

OUTER JOIN.
select * from emp, dept where emp.deptno(+) = dept.deptno ; 
select * from emp left outer join dept on emp.deptno = dept.deptno ;
select * from emp full outer join dept on emp.deptno = dept.deptno ; ( LEFT + RIGHT join )

주의사항.
양쪽 테이블에 동일한 컬럼이 존재하는 경우 '테이블.컬럼'을 통해 구분해서 사용.



 # 서브 쿼리 sub query.

서브쿼리.
SQL 문장의 절 안에 포함된 또 하나의 SQL 문장.
서브쿼리를 포함하는 쿼리문을 메인 쿼리라고 부르고, 포함된 쿼리문을 서브쿼리라고 한다.
서브쿼리는 ( )로 감싸서 표현한다.

종류.
단일 행 서브쿼리 : 결과 값이 하나의 로우만을 반환하는 경우.
다중 행 서브쿼리 : 결과 값이 두 개 이상의 로우를 반환하는 경우.



 # 단일 행 서브 쿼리.

설명.
Sub Query 수행 결과가 오직 하나의 로우만을 반환하는 서브쿼리이다.

주의사항.
다른 개체와 비교할 때 다중 로우를 가지고 있는 값과는 비교가 불가능하다.



 # 다중 행 서브 쿼리.

설명.
Sib Query 수행 결과가 두 개 이상의 로우를 반환하는 서브쿼리이다.

주의사항.
일반 비교연산자( =, <, ... )를 사용할 수 없고, 다중 행 연산자를 사용해야된다.
다중 행 연산자 : in, any, all, exist. 



 # 다중 행 연산자.

in( datas ) : datas 안에 값이 일치하는 경우 조건 성립.
any : 하나 이상이 일치하면 참.
all : 모든 값이 일치하면 참.
exist : 하나라도 존재하면 참.

주의사항.
단일 행에도 사용 가능하다.



 # 프로시저 procedure.

프로시저.
특정 기능을 수행하는 절차형 SQL을 활용하는 방법이다.

프로시저 생성.
create or replace procedure 프로시저이름 ( 파라미터 )
is
      변수 생성 ;
begin
      실행할 문장 ;
end ; 

프로시저 제거.
drop procedure 프로시저이름 ;

프로시저 에러 확인.
show errors ;



 # 커서 cursor.

커서.
쿼리문의 처리 결과가 저장되어 있는 메모리 공간을 가리키는 포인터이다.

커서의 실행 순서.
열기( open ) - 패치( fetch ) - 닫기( close ).

커서의 종류.
묵시적 커서( Implicit Cursor ) : 내부에서 자동으로 생성되어 사용되는 커서이다.
명시적 커서( Explicit Cursor ) : 사용자가 직접 정의해서 사용하는 커서이다. ( 열기 전에 Declare를 해야 함 )

커서 속성.
SQL%FOUND : 쿼리 수행의 결과로 패치된 튜플 수가 1개 이상이면 TRUE.
SQL%ROWCOUNT : 쿼리 수행의 결과로 패치된 튜플 수를 반환.
SQL%ISOPEN : 커서가 OPEN상태이면 TRUE. ( 묵시적 커서는 자동으로 닫히기 때문에 항상 FALSE ) 



 # 트리거.

트리거.
데이터의 CUD 등의 이벤트가 발생할 때 마다 관련 작업이 자동으로 수행되도록 하는 절차형 SQL.

트리거 생성.
create or replace trigger 트리거이름 [ after / before ] [ insert / update / delete ] 
on 테이블명
for each row
begin
    실행할 문장 ; 
end ; 

옵션.
:new - 이벤트를 수행하고 난 후 결과를 임시 저장하는 테이블을 의미한다.



 # 함수.

함수.
프로시저와 유사하게 SQL을 사용하여 작업을 처리하며 종료 시 하나의 값을 반환하는 절차형 SQL.

함수 생성.
create or replace Function 함수이름( 파라미터 )
    return type ;
is
    변수 선언 ; 
begin 
    실행할 문장 ;
    return 값 ;
end ;



 # 시퀀스 sequence.

시퀀스.
숫자를 자동으로 생성하여 unique, not null한 값을 채울 수 있도록 도와주는 역할을 한다.

시퀀스 생성.
create sequence 시퀀스이름 
     옵션 ;



 # 동의어 synonym.

동의어.
개체를 표현하는 다른 이름을 의미한다. ( 별칭과 같다 )

종류.
비공개 동의어 : 개체에 대한 접근 권한을 부여 받은 사용자만 사용가능.
공개 동의어 : 아무나 사용가능. public sysnonym을 통해 정의. DBA만 생성가능.

사용.
비공개 동의어 : username.SynonymName ;
공개 동의어 : SynonymName ;



 # 데이터 사전 Data Dictionary.

데이터사전.
데이터를 제외한 모든 정보가 테이블로 저장되어 있다.
시스템이 변경권한을 가지며, 사용자는 읽기 전용 테이블 형태로 제공된다.

명령어.
dba_ : 모든 객체의 정보 조회.
ALL_ : 자신 계정 소유 또는 권한을 부여 받은 객체의 정보 조회.
user_ : 자신의 계정이 소유한 객체에 관한 정보 조회. 



 # 옵티마이저 optimizer.

옵티마이저.
가능한 쿼리 계획을 고려하여 주어진 쿼리를 실행하는 가장 효율적인 방법을 결정한다.

종류.
RBO : 규칙 기반이라고 하며, 여러 개의 규칙 중 가장 비용이 적은 규칙을 선택. 
CBO : RBO의 단점을 보완 실제 실행했을 때 가장 비용이 적은 실행계획을 만들어 냄. ( 무조건 좋은 건 아님 )









