
 요구 사항 확인.



 # SW Engineering.

SW 위기.
hardware의 발전속도를 software의 발전속도가 따라잡지 못하는 현상.

SW 공학.
SW 위기를 극복하기 위한 방법으로 SW 개발을 공학적으로 접근하는 학문.



 # SW 개발 방법론.

SW 개발 방법론.
SW 개발, 유지보수 등에 필요한 일들을 체계적으로 정리하여 표준화한 것.
소프트웨어의 생산성과 품질 향상이 목적이다.

방법론의 종류.
구조적 방법론 : 정형화된 분석 절차에 따라 사용자의 요구 사항을 문서화하여 처리.
정보공학 방법론 : 데이터 중심의 개발 방법론.
객체지향 방법론 : 클래스와 객체 중심의 방법론.
컴포넌트 기반 방법론 : CBD - 객체 생성과 생명주기 관리를 시스템, 프레임워크가 하는 방법론.
애자일( Agile ) 방법론.
제품 계열 방법론 :  Embedded Application 개발에 적합한 방법으로 공통된 기능을 만들고 제품에 적용.

SW Lift Cycle - ISO / IEC 12207.
소프트웨어 개발 방법론의 바탕이 되는 것으로, 소프트웨어를 개발하기 위해 정의하고 운용.
소프트웨어 개발 단계와 각 단계별 주요 활동, 활도으이 결과에 대한 산출물로 표현.

폭포수 모델.
폭포수 모형은 앞 단계가 끝나야 다음 단계로 넘어갈 수 있다.
가장 오래되서 적용 사례가 많음.
단계별 산출물이 정확하다.
피드백이 없어서 요구 사항 변경이 용이 하지 않음.

폭포수 모델 개발 순서.
타당성 검토 단계 - > 계획과 요구 분석 단계 - > 개략 설계 단계 - > 상세 설계 단계 
- > 코딩 단계 - > 통합 검사 단계 - > 운용 단계 - > 유지 보수 단계.

프로토타이핑 모델.
요구 사항을 미리 파악하기 위한 것으로 SW 모델을 사전에 만듦. ( 샘플, 시제품, 견본 )
요구 사항 변경이 용이.
실제 제품과 혼동.
비효율적인 알고리즘이나 언어로 구현될 가능성이 있음.

나선형 모델.
라이프사이클 모델과 프로토타이핑의 장점만을 수용하고 위험성 분석을 포함한 방식.
계획 -> 위험 분석 - > 구현 - > 고객평가.

TDD Test-driven development.
요구사항을 검증하는 자동화된 테스트 케이스를 작성한 후에 테스트 케이스를 통과하기 위한 코드 작성.

Agile.
신속한 반복 작업을 통해 실제 작동 가능한 소프트웨어를 개발하여 요구 사항 변화에 유연하게 대처.
작동하는 소프트웨어의 작은 구성 요소를 신속하게 제공하여 고객의 만족도를 개선하는 것.
계약 협상보다는 고객과 협업에 가치를 부여.
계획을 따르기보다는 변화에 반응하는 것에 가치를 부여.



 # Agile 개발 모형.

스크럼 Scrum.
팀 중심으로 개발의 효율성을 높이는 기법.
팀의 구성 : PO - 총 책임자, SM - 가이드 역할을 하는 마스터, DT - PO와 SM을 제외한 팀원.

XP 모형.
고객의 요구 사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화한 방식.

Kanban - 간판의 일본어.
프로세스 전반에 걸친 적시 개발을 지원하는 방법론.

Lean.
구체적인 개발 프로세스를 정의하지 않고 철학적ㅇ니 접근 방식을 정의.

기능 중심 개발 Feature Driven Development.
설계 및 구축 기능에 중점을 두는 방식.
기능별로 개별적으로 수행해야하는 매우 구체적이고 짧은 단계의 작업을 설명.



 # 현행 시스템 파악.

1단계.
시스템 구성 파악 : 조직의 주요 업무를 담당하는 기간 업무와 지원 업무로 구분하여 기술.
시스템 기능 파악 : 단위 업무 시스템이 제공하는 기능들을 구분하여 표시.
시스템 인터페이스 파악 : 단위 업무 시스템 간에 주고받는 데이터의 종류 등을 명시.

2단계.
아키텍처 구성 파악 : 기간 업무 수행에 어떠한 기술 요소들이 사용되는지 작성.
소프트웨어 구성 파악 : 단위 업무 시스템 별로 업무 처리를 위해 설치되어 있는 제품 명시.

3단계.
하드웨어 구성 파악 : 서버의 주요 사양과 수량 등을 명시.
네트워크 구성 파악 : 네트워크의 구성을 파악.



 # 개발 환경 파악.

개발 환경 파악.
소프트웨어와 관련된 운영체제, DBMS, Middle Ware 등을 선정할 때 고려해야 될 사항을 기술.

운영체제 Operation System.
컴퓨터 시스템의 자원들을 효율적으로 관리하며 사용자가 컴퓨터를 쉽게 사용할 환경을 제공.
가용성, 성능, 기술 지원, 주변 기기, 구축 비용을 확인.

DBMS DataBase Management System.
사용자와 데이터베이스 사이에서 데이터베이스를 관리해 주는 시스템.
가용성, 성능, 기술 지원, 상호 호환성, 구축 비용을 확인.

MiddleWare.
TP - 모니터 미들웨어 : 트랜잭션 업무 관리 미들웨어.
Web Applcation Server : 사용자의 요구에 따라 변하는 동적인 컨텐츠를 처리.

IDE.
소스 코드를 작성하고 디버깅을 도와주는 통합 개발 환경.

Open Source.
별다른 제한 없이 사용할 수 있도록 소스 코드를 공개한 것.
고려사항 : 라이선스의 종류, 사용자 수, 기술의 지속 가능성.



 # 요구 사항 정의.

요구 사항.
소프트웨어가 문제를 해결하기 위해 서비스에 대한 설명과 제약조건.
소프트웨어 개발에 대한 기준과 근거.

요구 사항 유형.
기능 요구사항 : 시스템이 갖춰야할 필수적인 기능에 대한 요구사항.
비기능 요구사항 : 필수 기능 외의 품질이나 제약조건에 관한 요구사항.
사용자 요구사항 : 사용자 관점에서 본 시스템이 제공해야 할 요구사항.
시스템 요구사항 : 개발자 관점에서 본 시스템 전체가 다른 시스템에 제공해야 할 요구사항.

요구 사항 개발 프로세스.
타당성 조사 - > 도출( Elicitation ) - > 분석( Analysis ) - > 명세( Specification ) - > 확인( Validation ).

요구 사항 개발 프로세스.
도출 : 개발에 관련된 사람들이 서로 의견을 교환하여 요구 사항에 대해 이야기 하는 과정.
분석 : 도출된 요구 사항 중 이해되지 않는 부분을 걸러 내는 과정.
명세 : 요구 사항을 문서화 하는 과정.
확인 : 요구 사항 명세서가 정확하고 안전하게 작성되었는지 검토 하는 과정.



 # 요구 사항 분석.

요구 공학 Requirements Engineering.
요구 사항을 정의하고 관리하는 방법을 연구하는 학문.

요구 사항 분석.
요구 사항 분류 : 요구 사항을 명확히 확인할 수 있도록 분류.
개념 모델링 : 현실 세계의 데이터를 개념적으로 표현한 것.
요구 사항 할당 : 요구 사항을 만족 시키기 위한 구성 요소를 식별.
요구 사항 협상 : 요구 사항이 서로 충돌될 경우 해결.

요구 사항 명세 기법.
정형 분석 : 정형화된 언어를 이용해 요구 사항을 수학적 기호로 표현한 후 분석.
비형적 분석 : 자연어를 기반으로 Diagram을 작성하는 방법.



 # 구조적 분석.

구조적 분석.
자료의 흐름과 처리를 중심으로 요구 사항 분석을 수행하는 기법.

DFD Data Flow Diagram.
요구 사항 분석에서 자료의 흐름을 도형 중심으로 기술하는 방법.

DFD 표현방법.
프로세스 : 자료를 변환시키는 시스템의 한 부분.
자료 흐름 : 자료의 이동이나 연관관계를 나타냄.
자료 저장소 : 자료 저장소를 나타냄.
단말 : 시스템과 교신하는 외부 개체.

DD Data Dictionary.
DFD에 나온 자료에 대한 명세.

HIPO Hierarchical Input Process Output.
Input - process - Output으로 이루어진 모듈을 계층적으로 나타낸 도표이다.

HIPO Chart.
가시적 도표 : 시스템의 전체적인 기능과 흐름을 보여주는 Tree형태의 구조도.
총체적 도표 : 전반적인 정보를 제공하는 도표.
세부적 도표 : 기능을 구성하는 기본 요소들을 상세히 기술하는 도표.



 # 요구 사항 확인 기법.

요구사항 검토 Requirement Reviews.
문서화된 요구사항을 보면서 확인하는 것.

프로토타이핑 Prototyping.
초기 도출된 요구 사항을 토대로 프로토타입을 만든 후 수정해 가면서 작업하는 방식.

모델 검증.
요구사항 분석 단계에서 개발된 모델이 요구사항을 충족시키는지 검증.

인수 테스트.
사용자가 사용될 환경에서 요구사항들이 모두 충족되는지 확인.



 # UML Unified Modeling Language.

UML.
분석 설계를 비쥬얼 화, 문서화 하기 위한 그래픽 언어. ( 그래픽으로 모델링 )

Diagram.
사물과 관계를 도형으로 표현한 것.
정적 모델링 : 사용자가 요구한 기능을 구현하는데 필요한 자료들의 논리적인 구조를 표현한 것.
동적 모델링 : 시스템의 내부 구정 요소들의 상태가 변화하는 과정에서 발생하는 상호 작용을 표현.



 # Use Case Diagram.

Use Case Diagram.
시스템의 기능을 사용자의 관점에서 표현한 것으로 기능 모델링을 하기 위한 도구.

Use Case Diagram 구성요소.
시스템 범위 : 시스템 내부에서 수행되는 기능들을 외부 시스템과 구분하기 위한 시스템의 범위를 표현.
액터 : 시스템과 상호작용을 하는 모든 외부 요소로 사람이나 외부 시스템을 의미.
유스케이스 : 사용자 관점에서 시스템이 액터에게 제공하는 서비스 또는 기능.
관계 : 액터와 유스케이스, 유스케이스와 유스케이스 사이에서 나타나는 관계.



 # Activity Diagram.

Activity Diagram.
사용자의 관점에서 시스템이 수행하는 기능을 처리 흐름에 따라 표현하는 기능 모델링을 위한 도구.

Activity Diagram 구성요소.
액션 : 더 이상 분해할 수 없는 단일 작업.
액티비티 : 몇 개의 액션으로 분리될 수 있는 작업.
스윔 레인 : 액티비티 수행을 담ㄷ아하는 주체의 구분.



 # 프로젝트 관리.

프로젝트 관리.
개발 계획 프로그램을 수립하고 프로그램의 분석, 구현 등의 작업을 수행하는 것.

프로젝트 관리 대상.
사람, 문제, 프로세스.

프로젝트 계획 및 예측.
개발 공정과 제품생산에 대한 계획을 세우는데 신중.
예측을 뒤로 미루는 것은 가장 비현실적인 방법.

관리 유형.
일정 관리, 비용 관리, 인력 관리, 위험관리, 품질 관리, 형상 관리.

프로젝트 요소.
제품 복잡도 : 소프트웨어의 종류에 따라 발생할 수 있는 문제점들의 난이도.
시스템 크기 : 소프트웨어의 규모에 따라 개발해야 할 시스템의 크기.
요구되는 신뢰도 : 일정 기간 내 프로그램이 필요한 기능을 수행하는 정도.

자원 요소.
인적 자원 : 개발 관련자들이 갖춘 능력.
하드웨어 자원 : 개발 시 필요한 장비들.
소프트웨어 자원 : 개발 지원도구.

생산성 요소.
개발자 능력 : 개발자들이 갖춘 전문지식.
개발 기간 : 소프트웨어를 개발하는 기간.

하향식 산정법.
전문가의 감정 : 두 명 이상의 전문가에게 의뢰.
델파이식 산정 : 조정자를 두는 형태.

상향식 산정법.
LOC 기법 : 원시 코드 라인수를 측정해서 산정 PERT를 이용.
수학적 산정법 : COCOMO - 비용 추정 단계 및 적용 변수의 구체화 정도.


 
 # 소프트웨어 개발 표준.

ISO / IEC 12207.
ISO에서 만든 표준 소프트웨어 생명 주기 프로세스.



 # SW 공학의 3R.

SW 공학의 3R.
역공학( Reverse Engineering ) : 물리적인 수준의 정보를 논리적인 소프트웨어 정보의 서술로 추출.
재공학( Re-engineering ) : 자동화된 도구로 현존하는 시스템을 점검 또는 수정.
재사용( Reuse ) : 이미 개발되어있는 소프트웨어의 전체 또는 일부분을 다시 사용.

CASE Comput Aided Software Engineering.
소프트웨어 생산 자체를 컴퓨터의 도움으로자동화 시키자는 개념으로 탄생.
CASE를 활용하여 산출물을 작성하고 프로그램 코드를 만들어 냄.



 # SW 개발 프레임 워크.

개발 프레임워크.
SW 개발에 사용되는 구성 요소와 아키텍쳐를 일반화하여 쉽게 구현할 수 있도록 기능을 제공.

프레임워크가 성질.
모듈화, 재사용성, 확장성, 제어의 역전.








