
 인터페이스 구현.



 # 시스템 인터페이스 요구사항 분석.

시스템 인터페이스.
독립적으로 떨어져 있는 시스템끼리 서로 연동하여 상호 작용하기 위한 접속 방법이나 규칙.

시스템 인터페이스 요구사항 명세서의 구성 요소.
인터페이스 이름, 연계 대상 시스템, 연계 범위 및 내용,
연계 방식, 송신 데이터, 인터페이스 주기, 기타 고려사항.

시스템 인터페이스 요구사항 분석.
요구사항을 분류하고 구체적으로 명세 한 후 이해 관계자에게 전달하는 일련의 과정.
소프트웨어 요구사항 분석 기법을 적절히 이용.

시스템 인터페이스 요구사항 분석 절차.
요구사항을 선별하여 별도로 요구사항 목록을 생성.
요구사항과 관련된 자료를 준비.
기능적인 요구사항과 비기능적인 요구사항을 분류.
요구사항을 분석하고 요구사항 명세서에 내용을 추가하거나 수정.
추가 수정한 요구사항 명세서와 요구 사항 목록을 관련 이해 관계자에게 전달.



 # 인터페이스 요구 사항 검증.

요구 사항 검증.
사용자들의 요구사항이 요구사항 명세서에 기술되었는지 검토.

요구 사항 검증 순서.
요구사항 검토 계획 수립 - > 검토 및 오류 수정 - > 베이스라인 설정.

요구 사항 검증 방법.
요구사항 검토 : 요구사항 명세서의 오류 확인 및 표준 준수 여부 등의 결함 여부를 검토.
프로토타이핑 : 소프트웨어 견본품을 만들어 최종 결과물을 예측.
테스트 설계 : 테스트 케이스를 생성하여 요구 사항이 잘 실행되는지 테스트.
CASE 도구 활용 : 요구 사항 변경사항의 추적 및 분석 등을 확인.

요구 사항 검토.
동료 검토( Peer Review ) : 동료들이 결함을 발견하는 형태의 검토.
Walk Through : 명세서를 미리 배포하여 사전 검토한 후에 검토 회의를 통해 결함을 검토.
Inspection : 작성자를 제외한 다른 검토 전문가들이 요구사항 명세서를 확인하면서 검토.

요구 사항 검토 항목.
완전성( Completeness ) : 사용자의 모든 요구사항이 누락되지 않고 반영.
일관성( Consistency ) : 요구사항이 모순되거나 충돌되는 점 없이 일관성을 유지.
명확성( Unambiguity ) : 모든 참여자가 요구사항을 명확히 이해.
기능성( Functionality ) : 요구사항이 어떻게 보다 무엇을에 중점.
검증 가능성( Verifiabilitry ) : 요구사항이 사용자의 요구를 모두 만족하고 일치하는지.
추적 가능성( Traceability ) : 요구사항 명세서와 설계서를 추적.
변경 용이성( Easilty Changeable ) : 요구사항 명세서의 변경이 쉽도록.

인터페이스 시스템 식별을 위한 선행 작업.
개발 시스템과 내 - 외부 시스템 식별.
내 - 외부 시스템 환경 및 관리 주체 식별.
내 - 외부 시스템 네트워크 연결 정보 식별.
인터페이스 식별.



 # 송 - 수신 데이터 식별.

식별 대상 데이터.
송 - 수신 시스템 사이에서 교환되는 데이터로 규격화된 표준 형식에 따라 전송되는 데이터.

인터페이스 표준 항목.
송 - 수신 시스템을 연계하는데 표준적으로 필요한 데이터.
시스템 공통부 : 시스템 간 연동 시 필요한 공통 정보.
거래 공통부 : 시스템들이 연동된 후 송 - 수신되는 데이터를 처리할 때 필요한 정보.



 # 인터페이스 방법 명세화.

인터페이스 명세화 내용.
송 - 수신 방법 명세화.
송 - 수신 데이터 명세화.
오류 식별 및 처리 방안 명세화.

필요정보.
시스템 연계 기술.
인터페이스 통신 유형.
처리 유형.
발생 주기.

시스템 연계 기술.
DB Link : 데이터베이스에서 제공하는 Link를 이용하는 방식.
API / Oen API : 송싱 시스템의 데이터베이스에서 데이터를 읽어와 제공하는 인터페이스 프로그램.
연계 솔루션 : EAI 서버와 송 - 수신 시스템에 설치되는 클라이언트를 이용하는 방식.
Socket : 소켓을 생성하여 포트를 할당하고 클라이언트와 연결하여 통신하는 네트워크 기술.
Web Service : WSDL, UDDI, SOAP 프로토콜을 이용하여 연계하는 서비스.

인터페이스 통신 유형.
단방향, 동기, 비동기.

처리유형.
실시간 처리, 지연 처리 방식, 배치 방식.



 # 미들웨어 솔루션.

미들웨어.
운영체제와 응용 프로그램 또는 서버와 클라이언트 사이에서 다양한 서비스를 제공하는 소프트웨어.

종류.
DB.
RPC( Remote Procedure Call ) : 원격 프로시저를 로컬 프로시저처럼 호출하는 미들웨어.
MOM( Message Oriented Middleware ) : 비동기형 메시지를 전달하는 미들웨어.
TP-Monitor( Transaction Processing Monitor ) : 트랜잭션 처리 및 감시하는 미들웨어.
ORB( Object Request Broker ) : CORBA 표준 스펙을 구현한 객체 지향 미들웨어.
WAS( Web Application Server ) : 웹 서버에서 동적인 콘텐츠를 제공하기 위한 미들웨어.



 # 모듈 간 공통 기능 및 데이터 인터페이스.

확인 절차.
인터페이스 설계서를 통해 모듈별 기능을 확인.

인터페이스 설계서.
데이터 처리를 위한 목적으로 인터페이스 목록에 있는 각 시스템의 교환 및 송수신 등을 정의한 문서.

인터페이스 설계서 종류.
일반적인 설계서 : 시스템 인터페이스 설계서와 상세 기능별 인터페이스 명세서가 있다.
정적 동적 모형을 통한 설계서 : 시스템 구성 요소를 다이어그램으로 만든 문서.



 # 인터페이스 기능 식별.

EAI Enterprise Application Integration.
EAI를 사용함으로써 각 비즈니스 간 통합 및 연계성을 증대시켜 확장성을 높여 줄 수 있음.
Peer to Peer형, Hub & Spoke 방식, Bus 형태의 구성으로 분류.

ESB Enterprise Service Bus.
표준 기반의 인터페이스를 제공하는 솔루션.
관리 및 보안이 쉽고 높은 수준의 품질 지원이 가능하지만 표준화가 미비하고 성능 문제 개선해야 됨.

Web Service.
SOAP : HTTP, HTTPS, SMTP 등을 활용하여 XML 기반의 메시지를 네트워크 상에서 교환하는 프로토콜.
WSDL : 웹 서비스에 대한 상세 정보를 XML 형식으로 구현.
UDDI : WSDL을 등록하여 서비스와 서비스 제공자를 검색하고 접근하는데 사용.



 # 인터페이스 구현.

인터페이스 구현.
송 - 수신 시스템 간의 데이터 교환 및 처리를 실현해 주는 작업.

XML eXtensible Markup Language. ( 데이터 포맷 )
다른 종류의 시스템끼리 데이터를 쉽게 주고받을 수 있게 하는 포맷.
HTML, SGML, VRML 등이 유사한 형태이다.

JSON JavaScript OBject NOtation. ( 데이터 포맷 )
속성 - 값 쌍으로 이루어진 데이터 오브젝트를 전달하기 위해 사용하는 개방형 표준 포맷.
AJAX에서 많이 사용되고 XML을 대체하는 주요 데이터 포맷.

인터페이스 구현 절차.
데이터를 각 시스템 환경에 맞게 선택.
데이터 포맷을 이용해 인터페이스 객체를 생성.
수신측으로 전송.
클라이언트에서 AJAX 등의 기술을 이용해서 수신 한 후 파싱 한 후 처리.
수신 측에서 처리 결과를 송신 측으로 전송.

인터페이스 처리 유형.
실시간 방식 : 사용자가 요청한 내용을 바로 처리해야 할 때 사용하는 방식.
지연 처리 방식 : 데이터를 매 건 단위로 처리하면 비용이 많이 발생할 떄 사용하는 방식.
배치 방식 : 대량의 데이터를 처리할 때 모아서 처리하는 방식.
AJAX : 페이지의 일부만을 위한 데이터를 로드하는 기술.



 # 인터페이스 보안.

인터페이스 보안 기능 적용.
시스템 모듈 간 통신 및 정보 교환을 지원하므로 보안 취약점이 있을 수 있다.
네트워크 트래픽에 대한 암호화를 설정.

애플리케이션 영역.
OWASP( Open Web Application Security Project ) : 보안 취약점 발표 사례.
KISA( 한국 인터넷 진흥원 ) : SW 보안 약점 가이드.

데이터베이스 영역.
민감 데이터는 암호화하는 기법을 사용.



 # 인터페이스 기능 구현 검증.

검증 도구.
xUnit : java, C++, .Net 등 다양한 언어를 지원하는 단위 테스트 프레임워크.
STAF : 서비스 호출, 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크.
FitNesse : 웹 기반 케이스 확인하는 테스트 프레임워크.
NTAF : Naver 테스트 자동화 프레임워크.
Selenium : 웹 애플리케이션 테스트 프레임워크.
watir : Ruby 기반 웹 애플리케이션 테스트 프레임워크.

인터페이스 구현 감시 도구.
APM( Application Performance Management ) : 애플리케이션 성능 관리를 사용하여 감시.























