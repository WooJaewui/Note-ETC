 
 프로그래밍 언어.



 # 프로그래밍 언어의 분류.

절차적 프로그래밍.
코드를 순서대로 읽어서 실행하는 언어.
ALGOL : 알고리즘 개발을 만든 언어로  C와 PASCAL의 모체.
C : UNIX 운영체제를 개발하기 위해서 만들어진 언어.
COBOL : 영문장과 유사한 형태로 작성하는 사무 처리용 언어.
FORTRAN : 과학 기술 계산용 언어.

비절차적 프로그래밍 언어.
코드 작성 순서와 상관없이 실행되는 언어.
SQL이 대표적이며 객체 지향 언어들도 비절차적 언어.

구조적 프로그래밍 언어.
프로그래밍을 할 때 블럭 단위로 나누어서 작성이 가능한 언어.
유지보수가 편리해지고 재사용성이 증가.
pascal : 교육용으로 개발된 언어.
현재 사용되는 대부분의 언어는 구조적 프로그래밍 언어.

객체지향 프로그래밍 언어.
동일한 목적을 위하여 만들어진 변수와 함수를 클래스나 인스턴스로 묶어서 사용하는 언어.
Smalltalk : 초창기 객체 지향 언어로 C++이나 Java 등에 영향을 미침.
C++ : C언어의 문법을 지원하는 객체지향 언어.
JAVA : 완전한 객체 지향 언어로 반드시 클래스를 만들어서 코드를 작성해야 함.

스크립트 언어.
코드를 미리 번역하지 않고 줄 단위로 읽어가면서 실행하는 언어.
JavaScript : 웹 브라우저 안에서 동작하는 언어.
ASP, JSP, PHP, Python, Kotlin, Swift 등이 대표적인 스크립트 언어.

선언형 언어.
알고리즘을 기술하지 않고 문제만 기술하는 언어로 명령형 언어의 반대.
HTML, CSS, XML, LISP, PROLOG, Haskell.



 # 객체 지향 용어.

용어.
클래스 : 유사한 역할을 수행하는 객체들의 모임.
객체 : 동일한 목적을 위해 모인 데이터들과 이에 대한 연산을 가지는 것.
캡슐화( Encapsulation ) : 객체의 세부적 구현을 은폐하므로 데이터 변경 시 부작용을 최소화.
속성( Property ) : 각 객체가 가지고 있는 정보.
메소드( Method ) : 객체에 정의한 연산을 의미.
메세지 : 객체와 객체 사이의 통신수단.
상속성( Inheritance ) : 슈퍼 클래스는 상속하는 클래스, 서브클래스는 상속받는 클래스.
다형성( Polymerphism ) : 동일한 메시지에 대하여 서로 다르게 반응하는 성질.



 # Data Type.

데이터 타입.
데이터를 어떻게 저장하고 얼마만큼의 메모리 크기를 할당할 것인지의 여부.

저장된 데이터의 종류에 따른 분류.
기본형( Value Type ) : 데이터 자체를 저장하는 방식.
참조형( Reference Type ) : 데이터의 참조를 저장하는 방식.

데이터의 개수에 따른 분류.
Scala Type : 데이터 1개를 저장하는 방식으로 그 자체가 데이터.
Vector Type : 여러 개의 데이터를 묶어서 저장하는 방식.

C 정수 데이터 타입.
char( 1byte ) , unsigned char( 1byte )
short( 2byte ), unsigned short( 2byte )
int( 4byte ), unsigned int( 4byte )
long( 4byte ), unsigned long( 4byte )
long long( 8byte )
float( 4byte )
double( 8byte )
long double( 8byte )

Java 숫자 데이터 타입.
byte( 1byte ), short( 2byte ), char( 2byte ), int( 4byte ), long( 8byte ).
float( 4byte ), double( 8byte )

Python.
int - 메모리가 허락하는 무제한.
float( 8byte ).

정수 정리.
C 언어에서 unsigned가 앞에 있는 자료형은 음수가 없는 자료형임.
C언어에서 char는 영문과 숫자만 나타내며 Java에서는 영문, 숫자, 한글이 모두 가능.
Python에는 문자 자료형이 없음.

실수 정리.
메모리 크기가 커지면 정밀도가 높아지며 표현의 범위도 커진다.
Python에는 복소수를 저장할 수 있는 complex가 있음.

boolean 타입.
C언어 : 별도의 자료형이 존재하지 않으며 0이면 false, 0이 아닌 숫자는 참으로 간주.
Java : false와 true로 구분.
Python : False와 True로 구분.

배열.
동일한 자료형의 데이터를 연속적으로 저장한 것으로 크기가 고정.

배열의 길이.
C언어 : sizeof( 배열이름 ) / sizeof( 배열이름[0] )
Java : 배열이름.length

Literal.
프로그래밍 언어에서 고정된 값.

변수 Variable.
데이터를 저장한 공간에 붙이는 이름으로 데이터를 나중에 다시 사용하기 위해서 생성.
자료형과 초기값의 Data Type은 일치해야 함.
중간에 공백은 포함할 수 없음.
예약어는 변수명으로 사용할 수 없음.

상수 Constant.
값을 변경할 수 없도록 만드는 것.
이름은 변수와 구분하기 위해서 모두 대문자로 하는 것이 관례.
C언어 : 자료형 앞에 const를 기재.
Java : 자료형 앞에 final을 기재.

변수의 구분.
Local Variable : 선언된 영역에서만 사용 가능한 변수.
Class & Instance Variable : Class나 Instance로 사용이 제한된 변수.
Global Variable : 모든 영역에서 사용이 가능한 변수.

기억 클래스.
Auto( 자동 ) : 자신의 블럭 내에서만 사용되는 변수.
External( 외부 ) : 블럭 외부에서 선언되어 다른 블럭에서 사용이 가능한 변수.
Static( 정적 ) : 블럭 내부에 만들더라도 생성은 한 번만 이루어지며 소멸되지 않는 변수.
Register : CPU 내의 레지스터에 만들어지는 변수.



 # Input & Output.

C언어 Input.
scanf( 입력서식, 입력받을 참조 )
입력받을 참조 : 일반변수 - &변수명 또는 배열 - 변수명.
입력 서식 : %d, %u, %o, %x, %c 등.

C언어 Output.
printf( 출력서식, 출력할 표현식 )
출력할 표현식 : 상수, 변수, 연산식, 리턴이 있는 함수 호출.
출력 서식 : %d, %u, %o, %x, %c, %숫자d, %전체자릿수.소수자릿수f 등.

Java에서 입출력.
입력 : Scanner 클래스를 이용.
출력 : System.out.println( )을 사용.



 # 연산자.

연산자 종류.
최우선 연산자 : 함수, 괄호( ), 배열[ ], 구조체.
단항연산자 : + , - , / , % ,  * 등.
Shift 연산자 : >>, <<
관계 연산자 : =<, >=, >, <
등가 연산자 : ==, !=
and 연산자 : &
XOR 연산자 : ^ ( 양 쪽 비트가 동일하면 1이고 다르면 0을 리턴 ) 
OR 연산자 : |
논리곱 연산자 : &&
논리합 연산자 : ||
조건 연산자 : ? , ' : '
할당 연산자 : =, +=, -+ 등.
증감연산자 : ++, --
삼항 연산자 : ( 조건 ) ? 문장1 : 문장 2 ( 조건이 참이면 문장1을 반환, 거짓이면 문장2를 반환 )



 # 조건문.

if - else if - else 문.
if( 조건 ) { 
	실행할 문장 ;
} else if( 조건 ) { 
	실행할 문장 ;
} else { 
	실행할 문장 ;
}

Switch 문.
switch( 수식 또는 변수 ) {
	case 값1:
	문장1;
	break;
	case 값2:
	문장2;
	break;
	....
	default :
	문장 n + 1;	
	break ;
}



 # 반복문.

for문.
for( 처음 한 번 수행되는 식 ; 수행여부 판별식 ; 두번째 부터 수행할 식 )  { 
	반복할 문장 ;
	...
} ;

향상된 for문.
for( Object o : iterator ) { 반복할 문장 ; }

while문.
while( 조건 ) { 반복할 문장; } 

do - while문.
do { 반복할 문장; } while ( 조건 )



 # 기타 제어문.

break문.
반복문이나 switch문에서 사용되어 반복문이나 switch문을 끝낼 때 사용한다.

continue문.
반복문 내에서 사용하며 다음에 오는 코드를 진행하지 않고 처음부터 다시 반복문을 실행한다.

goto문.
goto문이 지시하는 장소로 분기하게 하는 제어문.



 # 배열.

배열.
동일한 데이터 타입의 데이터들이 연속적으로 저장되는 자료구조이다.

1차원 배열.
자료형 배열명[ 배열의 크기 ]
int[ ] arr = int[10] ;
int[ ] arr = { 1,2,3,4,5 } ; 

배열의 길이.
C언어 : sizeof( 배열명 ); , sizeof( 배열명[0] ) ;
Java : 배열명.length ;
Python : 배열이 없다.

2차원 배열.
자료형 배열명[ 배열의 크기 ] [ 배열의 크기 ]
int[ ][ ] arr = int[3][4] ; 
int[ ][ ] arr = { { 1,2,3,4 } { 5,6,7,8 } { 9,10,11,12 } } ;



 # 문자열 처리.

고급언어.
Java : char와 String이라는 클래스를 이용.
Python : 문자와 문자열을 구분하지 않고 str로 처리.



 # 기본 알고리즘.

최대, 최소 알고리즘.
최대, 최소값을 찾을 때는 임의의 한 수를 선택하고 모든 수와 비교해서 최대/최소 값을 찾는다.

2개의 요소 자리 변경.
a = 1, b = 2 ;
c = a ;
a = b ; 
b = c ; 

선택 정렬.
첫 번째 자리부터 마지막에서 두 번째 자리까지 자신보다 뒤에 있는 모든 자리들과 비교.

버블 정렬.
n개의 데이터가 있을 때 1부터 n-1번째 자료까지 n-1번 동안 자료를 비교하는 정렬방법.

삽입 정렬.
가장 왼쪽에 있는 첫 번째 데이터를 정렬된 상태로 가정하고 나머지 자료들을 정렬하는 방법.

순위 알고리즘.
모든 사람의 점수가 1등이라 하고 모든 사람들과 비교하여 높은 점수를 만나면 순위를 1씩 증가.

순차 검색.
첫 번째 데이터부터 마지막 데이터까지 모두 검색해서 찾는 방법이다.
데이터가 많은 경우 매우 비 효율적인 방법.

이분 검색.
중앙 값과 비교해서 작으면 왼쪽 크면 오른쪽으로 이동해서 검색하는 방법.



 # 포인터.

포인터.
주소를 관리하기 위한 자료형이다.
메모리의 주소를 저장하거나 사용하기 위한 변수.

포인터를 사용하는 이유.
동적으로 메모리를 관리하기 위해서.
배열이나 문자열을 편리하게 사용하기 위해.
복잡한 자료 구조를 효율적으로 처리하기 위해.

포인터 변수.
자료형 *포인터변수명 ;
포인터변수명 = &변수명 ;
int *pointerName ;
int VariableName = 10 ;
pointerName = &VariableName ; 

주의사항.
배열 이름은 &연산자를 붙이지 않아도 된다.

포인터 변수의 연산.
포인터 변수도 값을 저장하고 있으므로 산술연산이 가능하다.
포인터 변수끼리 덧셈은 할 수 없다.
뺄셈은 가능한데 주소의 차이가 얼마인지 알아낼 수 있다.
증감연산자 사용 가능.
자료형이 다를 경우 캐스트 연산자로 자료형을 강제로 맞추어야 한다.
포인터 변수끼리 비교는 불가능하다.



 # 배열과 포인터.

1차원 배열과 포인터.
1차원 배열에서는 배열 이름 자체가 배열이 할당받은 메모리 공간의 시작 주소를 의미.
배열명 + 1은 배열의 자료형 크기 만큼씩 주소가 증가된다.

2차원 배열과 포인터.
2차원 배열에서 배열명은 첫 번째 행의 주소가 된다.
배열명 + 1은 하나의 행을 증가시키는 효과.



 # 동적 메모리 할당.

동적 할당 Dynamic Allocation.
실행( Run Time ) 중에 필요한 만큼 메모리를 할당하는 기법이다.



 # 함수.

함수.
자주 사용하는 기능을 이름으로 미리 정의해두고 호출하여 기능을 사용하는 방식.

함수를 사용하는 이유.
코드의 불필요한 반복을 피하기 위한 수단.
체계적이고 간결하게 작성하기 위한 수단.
여러 개의 부분으로 나누어서 프로그램하고 컴파일을 가능하게 함.

함수의 종류.
컴파일러가 제공하는 함수. ( Maker Function ) 
사용자가 정의해서 사용하는 사용자 정의 함수.

C언어의 함수 사용.
컴파일러가 제공하는 함수를 사용하기 위해서 함수가 정의된 헤더파일을 소스파일에 포함시켜야 한다.
#include <함수>

함수 생성.
리턴타입 함수명( 매개변수 ) { 
	함수내부의 변수 선언 ; 
	실행할 문장 ;
	return 리턴타입변수 ; 
}

매개변수 전달 방법.
call by value : 함수를 호출할 때 매개변수에 바로 사용할 수 있는 값을 전달하는 방식.
call by reference : 매개 변수의 값이 다른 데이터의 주소를 전달하는 방식.



 # 재귀함수.

재귀함수.
자기 자신을 다시 호출하여 사용하는 것이다.
재귀함수는 호출할 때마다 스택을 생성하여 메모리를 많이 소모하며 성능이 좋지 않아 가급적 사용 X.
수열을 구하는 프로그램 등에서 사용하면 형태가 간결해지고 이해하기 쉬워짐.



 # 함수 포인터.

함수 포인터.
함수를 가리키는 포인터입니다. ( 다른 언어에서는 delegate란 표현을 사용 )

함수 포인터 선언 방식.
타입 ( *변수명 )( 매개변수 ) ;

함수 포인터 호출.
( 함수포인터 ) ( 매개변수 ) ;
( * 함수포인터 ) ( 매개변수 ) ;

함수 포인터를 사용하는 이유.
함수 포인터를 이용하면 동일한 모양의 함수를 호출할 때 하나의 문장으로 처리가 가능. ( 다형성과 비슷 )



 # Python.

특징.
데이터의 자료형을 대입할 떄 결정하기 때문에 변수를 만들 때 자료형을 기재할 필요가 없음.
줄 단위로 번역해서 실행하기 때문에 하나의 명령어를 구분하기 위한 ' ; ' 이 필요없다.
한 줄에 2개의 명령어를 작성하는 경우에는 명령어를 구분하기 위해 ' ; '를 입력.
들여쓰기가 같으면 동일한 코드 블록으로 생각되어진다.
문자열을 문자 데이터의 모임으로 취급.
배열이 없고 list가 존재.
파이썬의 list에서 주의할 점은 인덱스가 음수가 허용되고, 음수는 뒤에서부터 찾아온다.

입력.
input( '메시지' ) 

출력.
print( '메시지' )

Python의 Collection.
list : [ 데이터 나열 ] 
set : { 데이터 나열 } 
map { key : value, key:value... } 



 # 라이브러리 & 프레임워크.

라이브러리 & 프레임워크.
프로그램을 개발할 때 많이 사용될 것 같은 함수나 클래스를 미리 만들어서 제공하는 것.

솔루션.
특정한 작업을 편리하게 만들기 위한 것.

라이브러리 종류.
표준 라이브러리 : 프로그래밍 언어가 제공하는 라이브러리.
외부 라이브러리( 3rd Party ) : 외부 개발자들이 만들어서 제공하는 라이브러리.



 # 예외 Exception.

용어.
컴파일 에러( error ) : .java 파일에 오류가 있거나 jvm이 인식할 수 없는 오류.
예외( Exception ) : 실행 예외, 컴파일 예외가 있음.
논리적 에러 : 정상적으로 실행이 되었지만 의도하지 않은 결과가 나오는 경우.
단언( assert ) : 개발자가 의도적으로 특정 조건을 만족했을 때만 프로그램이 도작하도록 만든 것.













