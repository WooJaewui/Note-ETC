
 제품 소프트웨어 패키징.



 # 패키징.

패키징.
모듈 별로 생성한 실행 파일들을 묶어 배포용 설치 파일을 만드는 것.
개발자가 아니라 사용자를 중심으로 진행.
소스코드는 향후 관리를 고려하여 모듈화하여 패키징.

소프트웨어 패키징 작업 순서.
기능 식별 - > 모듈화 - > 빌드 진행 - > 사용자 환경 분석 - > 패키징 및 적용 시험
- > 패키징 변경 개선 - > 배포.



 # 릴리즈 노트.

릴리즈 노트 Release Note.
개발 과정에서 정리된 릴리즈 정보를 최종 사용자인 고객과 공유하기 위한 문서.

작성 항목.
Header( 머릿말 ), 개요, 목적, 문제 요역, 재현 항목, 수정 / 개선 내용, 사용자 영향도,
SW 지원 영향도, 노트, 면책 조항, 연락처.

릴리즈 노트 작성 순서.
모듈 식별 : 모듈별 빌드 수행 후 릴리즈 노트에 작성 될 내용 확인.
릴리즈 정보 확인 : 릴리즈 노트 및 소프트웨어 이름, 노트 날짜 및 버전 등 확인.
릴리즈 노트 개요 작성 : 소프트웨어 및 변경사항 전체에 대한 간략한 내용 작성.
영향도 체크 : 버그나 이슈 관련 내용 또는 기능 변화가 미치는 영향 기술.
정식 릴리즈 노트 작성 : 정식 릴리즈 노트에 작성 될 기본 사항 작성.
추가 개선 항목 식별 : 추가 버전 릴리즈 노트 작성이 필요한 경우 작성.



 # 디지털 저작권 관리.

디지털 저작권 관리 DRM.
저작권자가 배포한 디지털 콘텐츠가 의도 한 용도로만 사용되도록 디지털 콘텐츠 관리 및 보호 기술.

디지털 저작권 관리의 구성 요소.
Clearing House : 저작권에 대한 사용 권한, 라이선스 발급, 결제 관리 등을 수행하는 곳.
Contents Provider : 콘텐츠를 제공하는 제공자 또는 저작권자.
Packager : 콘텐츠를 메타 데이터와 함께 배포 가능한 형태로 묶어 암호화하는 프로그램.
Contents Distributor : 콘텐츠를 유통하는 곳이나 사람.
Customer : 콘텐츠를 구매해서 사용하는 주체.
DRM Controller :  배포된 콘텐츠의 이용 권한을 통제하는 프로그램.
Security Container : 콘텐츠 원본을 안전하게 유통하기 위한 전자적 보안 장치.

디지털 저작권 관리의 기술 요소.
암호화( Encryption ) : 콘텐츠 및 라이선스를 암호화하고 전자 서명을 할 수 있는 기술.
키 관리( Key Management ) : 암호화한 키에 대한 저장 및 분배 기술.
암호화 파일 생성( Packager ) : 콘텐츠를 암호화된 콘텐츠로 생성하기 위한 기술.
식별 기술( Identification ) : 콘텐츠에 대한 식별 체계 표현 기술.
저작권 표현( Right Expression ) : 라이선스의 내용 표현 기술.
정책 관리( Policy Management ) : 라이선스 발급 및 사용에 대한 정책 표현 및 관리 기술.
크랙 방지( Tamper Resistance ) : 크랙에 의한 콘텐츠 사용 방지 기술.
인증( Authentication ) : 라이선스 발급 및 사용의 기준이 되는 사용자 인증 기술.



 # 소프트웨어 설치 메뉴얼 작성.

설치 메뉴얼 작성.
개발 초기에서부터 적용된 기준이나 사용자가 소프트웨어를 설치하는 과정에 필요한 내용 설명서.

설치 메뉴얼 작성 순서.
기능 식별 : 소프트웨어의 개발 목적과 주요 기능을 흐름 순으로 정리하여 기록.
UI 분류 : 설치 메뉴얼을 작성할 순서대로 UI를 분류 한 후 기록.
설치 파일 / 백업 파일 확인 : 폴더 위치, 설치 파일 등의 개별적인 기능을 확인하여 기록.
Uninstall 절차 확인 : Uninstall 순서를 단계별로 자세히 기록.
이상 Case 확인 : 설치 과정에서 발생할 수 있는 다양한 Case를 만들어 확인하고 대처법 기록.
최종 메뉴얼 적용 : 완성된 메뉴얼을 검토하고 고객 지원에 대한 내용 기록.

사용자 메뉴얼 작성.
사용자가 소프트웨어를 사용하는 과정에서 필요한 내용 설명서.

사용자 메뉴얼 작성 순서.
기능 식별 : 소프트웨어의 개발 목적과 주요 기능을 흐름 순으로 정리하여 기록.
사용자 화면 분류 : 사용자 화면을 메뉴 별로 분류하여 기록.
사용자 환경 파일 확인 : 폴더 위치, 백업 파일 등의 개별적인 기능을 확인하여 기록.
초기화 절차 확인 : 프로그램을 사용하기 위한 초기화 절차를 확인하고 기록.
이상 Case 확인 : 사용 과정에서 발생할 수 있는 다양한 이상 Case를 확인하고 대처법 기록.
최종 메뉴얼 적용 : 완성된 메뉴얼을 검토하고 고객 지원에 대한 내용 기록.



 # 형상 관리.

형상관리 SCM : Software Configuration Management.
소프트웨어 개발 과정에서 변경 사항을 관리하기 위해 개발된 일련의 활동이다.

형상 관리 기능.
형상 식별 : 이름과 관리 번호를 부여하고 계층 구조로 구분하여 수정 및 추적이 용이하도록 하는 작업.
버전 제어 : 유지 보수 과정에서 생성된 다른 버전의 형상 항목을 관리.
형상 통제 : 식별된 형상 항목에 대한 변경 요구를 검토하여 조정하는 작업.
형상 감사 : 기준선의 무결성을 평가하기 위해 확인, 검증, 검열 과정을 통해 공식적으로 승인하는 작업.
형상 기록 : 형상의 식별,통제, 감사 작업의 결과를 기록 관리하고 보고서를 작성하는 작업.

소프트웨어 버전 등록 과정.
가져오기( import ) : 개발자가 저장소에 신규로 파일을 추가함.
인출( Chech-out ) : 수정 작업을 진행할 개발자가 저장소에 추가된 파일을 자신의 작업 공간으로 인출.
예치( Commit ) : 인출한 파일을 수정한 후 설명을 붙여 저장소에 예치함.
동기화( Update ) : 커밋 후 새로운 개발자가 자신의 작업 공간을 동기화함.
차이( Diff ) : 새로운 개발자가 추가된 파일의 수정 기록을 확인하면서 이전 개발자가 파일의 차이를 확인.

소프트웨어 버전 관리 도구.
공유 폴더 방식 : 버전 관리 자료가 로컬 컴퓨터의 공유 폴더에 저장되어 관리되는 방식.
클라이언트 / 서버 방식 : 버전 관리 자료가 중앙 시스템( 서버 )에 저장되어 관리되는 방식.
분산 저장소 방식 : 버전 관리 자료가 하나의 원격 저장소와 분산된 PC의 로컬 저장소에 저장되어 관리.

Subversion( SVN ).
CVS를 개선한 것으로, 클라이언트 / 서버 구조이며 아파치 소프트웨어에서 개발.

GIT.
리누스 토발즈가 리눅스 커널 개발에 사용할 관리 도구로 개발한 이후 유지 보수.
분산 버전 관리 시스템으로 2개의 저장소( 지역, 원격 )를 이용하고 버전 관리는 지역저장소에서 이루어짐.


 
 # 빌드 자동화 도구.

빌드.
빌드는 소스 코드 파일들을 컴파일한 후 여러 개의 모듈을 묶어 실행 파일로 만드는 과정.

Jenkins.
Java 기반의 오픈 소스 형태로 가장 많이 사용되는 빌드 자동화 도구.
서블릿 컨테이너에서 실행되는 서버 기반 도구.
SVN, Git 등 대부분의 형상 관리 도구와 연동이 가능.
여러 대의 컴퓨터를 이용한 분산 빌드나 테스트가 가능.

Gradle.
Groovy를 기반으로 한 오픈 소스 형태의 자동화 도구로 안드로이드 앱 개발 환경에서 사용.

Maven.
자바 용 프로젝트 관리 도구.
아파치 라이선스로 배포되는 오픈 소스 소프트웨어.
























