
 어플리케이션 테스트 관리.



 # 상용 소프트웨어의 특성 및 유형.

산업 범용 소프트웨어.
시스템 소프트웨어 : 운영체제, DBMS, 프로그래밍 언어, 가상화 도구, 스토리지 소프트웨어, 소프트웨어 공학 도구.
미들웨어 : 웹 애플리케이션 서버, 실시간 데이터 처리, 네트워크 관리, 시스템 관리, 클라우드 서비스 등.
응용 소프트웨어

산업 특화 소프트웨어.
특정한 산업 분야에서 요구하는 기능만을 구현하기 위한 목적의 소프트웨어.

서비스 제공 소프트웨어.
신규 개발 소프트웨어.
기능 개선 소프트웨어.
추가 개발 소프트웨어.
시스템 통합 소프트웨어.



 # 애플리케이션 테스트.

애플리케이션 테스트.
애플리케이션에 잠재되어 있는 결함을 찾아내는 일련의 행위 또는 절차.
소프트웨어가 고객의 요구사항을 만족시키는지 확인( Validation )하고 기능을 정확히 수행하는지 검증( Verification ).

애플리케이션 테스트의 기본 원리.
완벽한 테스트 불가능 : 잠재적인 결함을 줄일 수 있지만 결함이 없다고 증명할 수 없다.
결함 집중( Defect Clustering ) : 20%의 코드에 전체 결함의 80%가 발견된다. ( 파레토 법칙 ) 
살충제 패러독스 : 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는다.
테스팅은 정황( Context ) 의존 : 정황에 따라 테스트를 다르게 수행해야 된다.
오류 - 부재의 궤변 : 결함을 모두 제거해도 사용자의 요구사항을 만족시키지 못하면 품질이 높다고 할 수 없다.
테스트와 위험은 반비례.
테스트의 점진적 확대.
테스트는 개발 팀이 아닌 별도의 팀이 수행.

소프트웨어 테스트 프로세스.
테스트 계획 : 계획서, 요구 명세서 등을 기반으로 테스트 목표를 정의하고 테스트 대상 및 범위를 결정함.
테스트 분석 및 디자인 : 테스트의 목적과 원칙을 검토하고 사용자의 요구 사항을 분석함.
테스트 케이스 및 시나리오 작성 : 테스트 케이스를 작성하고 검토 및 확인 후 테스트 시나리오를 작성. 
테스트 수행 : 테스트 환경을 구축한 후 테스트를 수행.
테스트 결과 평가 및 리포팅 : 테스트 결과를 비교 분석하여 테스트 결과서를 작성함.
결함 추적 및 관리 : 테스트를 수행한 후 결함이 어디서 발생 했는지, 어떤 종류인지 추적하고 관리함.



 # 테스트 유형.

프로그램 실행 여부.
정적 테스트 : 프로그램을 실행하지 않고 명세서나 소스 코드를 분석하는 테스트 방법. ( Walk Throgh 등 )
동적 테스트 : 프로그램을 실행하여 오류를 찾는 테스트 ( 화이트 박스 테스트, 블랙 박스 테스트 )

시각에 따른 테스트.
검증( Verification ) 테스트 : 개발자의 시각에서 생산 과정을 테스트 하는 것으로 명세서대로 완성 됐는지 확인.
확인( Validation ) 테스트 : 사용자의 시각에서 제품의 결과를 테스트하는 것으로 요구한대로 제품이 완성 됐는지.

테스트기반에 따른 테스트.
명세 기반 테스트 : 사용자의 요구사항에 대한 명세를 빠짐없이 테스트 케이스로 만들어 구현하고 있는지 확인.
구조 기반 테스트 : 소프트웨어 내부의 논리 흐름에 따라 테스트 케이스를 작성하고 확인하는 테스트.
경험 기반 테스트 : 유사 소프트웨어나 기술 등에 대한 테스터의 경험을 기반으로 수행하는 테스트.

목적에 따른 테스트 유형.
회복 테스트 : 시스템의 실패를 유도하고 시스템이 정상적으로 복귀하는지 테스트.
안전( Security )테스트 : 소스 코드 내의 보안적인 결함을 미리 점검하는 테스트.
강도( Stress ) 테스트 : 시스템에 과다 정보량을 부과하여 과부하 시에 시스템을 확인하는 테스트.
성능( Performance ) 테스트 : 이벤트 응답 시간, 시간 내에 처리하는 업무량 등을 확인하는 테스트.
구조( Structure ) 테스트 : 시스템의 내부 논리 경로, 소스코드의 복잡도를 평가하는 테스트.
회귀( Regression ) 테스트 : 변경 또는 수정된 코드에 대해 새로운 결함 여부를 평가하는 테스트.
병행( Parallel ) 테스트 : 변경된 시스템과 기존 시스템에 동일한 데이터를 입력 후 비교하는 테스트.

White Box Test.
원시 코드의 논리적인 모든 경로를 테스트하여 테스트 케이스를 설계 하는 방법.
원시 코드의 모든 문장을 한 번 이상 실행함으로써 수행한다.
기초 경로 검사 , 제어 구조 검사 등이 있다.

Black Box Test.
소프트웨어가 수행할 특정 기능을 알기 위해 각 기능이 완전히 작동되는 것을 입증하는 기능 테스트.
동치 분할 검사 : 타당한 입력 자료와 타당하지 않은 입력 자료를 동등하게 넣어서 테스트.
경계 값 검사 : 입력 조건의 경계 값을 테스트 케이스로 선정하여 검사.
원인 효과 그래프 검사 : 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 분석한 다음 검사.
오류 예측 검사 : 과거의 경험이나 사람의 감각으로 테스트하는 기법.
비교 검사 : 여러 버전의 프로그램에 동일한 테스트 자료를 제공하여 테스트하는 기법.

개발 단계에 따른 테스트 유형.
단위 테스트 : 모듈이나 컴포넌트에 초점을 맞춰 테스트.
통합 테스트 : 단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트.
시스템 테스트 : 소프트웨어가 시스템에서 완벽하게 수행되는 가를 점검하는 테스트.
인수 테스트 : 사용자의 요구사항을 충족하는지에 중점을 두고 테스트.



 # 단위 테스트 Unit Test.

단위 테스트.
소프트웨어 설계의 최소 단위인 모듈이나 컴포넌트에 초점을 맞춰 테스트.



 # 통합 테스트.

통합 테스트.
단위 테스트가 끝난 모듈을 통합하는 과정에서 발생하는 오류 및 결함을 찾는 테스트 기법.

비점진적 통합 방식.
단계적으로 통합하는 절차 없이 모든 모듈이 미리 결합되어 있는 프로그램 전체를 테스트.
오류 발견 및 장애 위치 파악 및 수정이 어렵다.

점진적 통합 방식.
모듈 단위로 단계적으로 통합하면서 테스트하는 방법.
오류 수정이 용이하고 인터페이스와 연관된 오류를 완전히 테스트할 가능성이 높음.
하향식 통합 테스트 : 프로그램의 상위 모듈에서 하위 모듈 방향으로 통합하는 방식.
상향식 통합 테스트 : 프로그램의 하위 모듈에서 상위 모듈 방향으로 통합하는 방식.
혼합식 통합 테스트 : 하위 수준에서는 상향식으로, 상위에서는 하향식으로 통합하는 방식.



 # 어플리케이션 테스트 절차.

테스트 절차.
테스트 계획 - > 테스트 분석 및 디자인 - > 테스트 케이스 및 시나리오 작성 - > 테스트 수행
- > 테스트 결과 평가 및 리포팅 - > 결함 추적 및 관리.

결함 관리 프로세스.
에러 발견 - > 에러 등록 - > 에러 분석 - > 결함 확정 
- > 결함 할당 - > 결함 조치 - > 결함 조치 검토 및 승인.



 # 테스트 케이스.

테스트 케이스.
테스트 항목에 대한 명세서로, 명세 기반 테스트의 설계 산출물.

테스트 시나리오.
테스트 케이스를 적용하는 순서에 따라 여러 개의 테스트 케이스들을 묶은 집합으로 구체적인 절차를 명세한 문서.



 # Test 자동화 도구.

Test 자동화 도구.
테스트 절차를 스크립트 형태로 구현한 테스트 자동화 도구를 사용함으로써 휴면 에러를 줄일 수 있다.

정적 분석 도구 Static Analysis Tools.
프로그램을 실행 하지 않고 분석하는 도구.

테스트 실행 도구 Test Execution Tools.
테스트 데이터와 테스트 수행 방법 등이 포함된 스크립트를 작성 한 후 실행하는 도구.

성능 테스트 도구 Performance Test Tools.
처리량, 응답 시간, 경과 시간 등을 테스트한다.

테스트 통제 도구 Test Control Tools.
테스트 계획 및 관리, 테스트 수행 등을 수행하는 도구.

테스트 하네스 도구 Test Harness Tools.
시뮬레이션하여 컴포넌트 및 모듈이 정상적으로 테스트 되도록 하는 도구.



 # 결함 관리.

결함.
오류 발생, 작동 실패 등.

결함 관리 프로세스 순서.
결함 관리 계획 - > 결함 기록 - > 결함 검토 - > 결함 수정 
- > 결함 재확인 - > 결함 상태 추적 및 모니터링 활동 - > 최종 결함 분석 및 보고서 작성.

결함 분류.
시스템 결함 : 애플리케이션 환경이나 데이터베이스 처리에서 발생된 결함.
기능 결함 : 애플리케이션의 기획, 설계, 업무 시나리오 등의 단계에서 유입된 결함.
GUI 결함 : 사용자 화면 설계에서 발생된 결함.
문서 결함 : 의사소통 및 기록이 원활하지 않아 발생된 결함.



 # 애플리케이션 성능 분석.

애플리케이션 성능 측정 지표.
처리량( Throughput ) : 일정 시간 내에 애플리케이션이 처리하는 일의 양.
응답 시간( Response Time ) : 애플리케이션에 요청을 전달한 시간부터 응답이 도착할 때까지 걸린 시간.
경과 시간( Turn Around Time ) : 애플리케이션 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간.
자원 사용률( Resource Usage ) : 작업을 처리하는 동안의 CPU사용량.

성능 테스트 도구.
Jmeter, LoadUI, OpenSTA.

시스템 모니터링 도구.
Scouter, Zabbix.



 # 복잡도.

공간 복잡도.
알고리즘을 프로그램으로 실행하여 완료하기까지 필요한 총 저장 공간의 양.
공간 복잡도 = 고정 공간 + 가변 공간.

시간 복잡도.
알고리즘을 프로그램으로 실행하여 완료하기까지의 총 소요시간.
시간 복잡도 = 컴파일 시간 + 실행 시간.

알고리즘 분석.
알고리즘의 성능 분석은 시간 복잡도를 더 중요한 평가 기준으로 보고 대부분 시간 복잡도를 성능 분석에 사용.



 # 애플리케이션 성능 개선.

소스 코드 최적화.
나쁜 코드( Bad Code )를 배제하고 클린 코드( Clean Code )로 작성하는 것.
클린 코드 : 누구나 쉽게 이해하고 수정 및 추가할 수 있는 단순 명료한 코드.
나쁜 코드 : 코드의 로직이 서로 얽혀 있는 스파게티 코드 등 이해하기 어려운 코드.
외계인 코드 : 너무 오래되서 설계 관련 정보가 없는 코드.

클린 코드 작성 원칙.
가독성, 단순성, 의존성 배제, 중복성 최소화, 추상화.

소스 코드 최적화 유형.
클래스 분할 배치 : 하나의 클래스는 하나의 역할만 수행하도록 응집도를 높인다.
Loosely Coupled( 느슨한 결합 ) : 추상화된 자료 구조와 메소드를 구현함으로써 클래스 간의 의존성을 최소화.
코딩 형식 준수, 좋은 이름 사용, 적절한 주석문 사용.

정적 분석 도구.
pmd : 미사용 변수나 최적화 되지 않은 코드처럼 결함을 유발할 수 있는 코드를 검사.
cppcheck : C / C++ 코드에 대한 메모리 누수나 오버플로우를 분석.
SonarQube : 중복 코드, 복잡도, 코딩 설게 등을 분석하는 소스 분석 통합 플랫폼.
checkstyle : 자바 코드의 소스 코드 표준 준수 여부를 검사해주는 라이브러리.
ccm : 코드 복잡도 분석.
cobertura : 자바의 소스 코드 복잡도 및 테스트 커버리지 측정.

동적 분석 도구.
Avalanche : 프로그램에 대한 결함 및 취약점 등을 분석.
Valgring : 메모리 및 쓰레드 결함 등을 분석함.
Instruments : Xcode에서 성능 분석 도구.




