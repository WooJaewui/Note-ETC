
 SQL 응용(1) - 70

 # 관계 대수 Relational Algebra.

관계 대수.
원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는 가를 기술하는 절차적인 언어.
연산의 순서를 명시하며, 릴레이션을 처리하기 위해 연산자와 연산 규칙을 제공.

일반 집합 연산자.
n : 교집합.
U : 합집합.
- : 차집합.
X : 카티션 프로덕트 - 속성의 수는 더하기, 튜플의 수는 곱하기.

순수 관계 연산자.
select( σ ) : 선택 조건을 만족하는 릴레이션의 수평적 부분집합.
Project( π ) : 릴레이션의 수직적 부분집합, 중복 튜플의 생성은 제거.
Join( ⋈ ) : 세타 조인, 동일 조인 자연 조인 등.
Division( ÷ ) : 속성을 제외하고 나머지 속성만 추출해내는 기능.



 # 관계 해석 Relational Calculus.

관계 해석.
프레디키트 해석( predicate calculus )으로 질의어를 표현.
원하는 릴레이션을 정의하는 방법을 제공하며 비절차적인 언어.
튜플 관계 해석과 도메인 관계 해석의 두 종류.



 # SQL 

SQL.
1974년 IBM 연구소에서 개발한 SEQUEL에서 유래.
국제 표준 데이터베이스 언어, 많은 회사에서 관계형 데이터베이스( RDB )를 지원하는 언어로 채택.
관계 대수와 관계 해석을 기초로 한 혼합 데이터 언어.
CRUD 모두 가능.



 # SQL의 분류.

DDL ( Date Definition Language ) : 객체의 생성과 변경시 사용.
DML ( Data Manipulation Language ) : CRUD시 사용.
DCL ( Date Control Language ) : 권한 부여 및 취소.

DQL ( Data Query Language ) : 검색시 사용.
TCL ( Transaction Control Language ) : Transaction 종료 및 취소.



 # DDL Data Definition Language.

DDL.
DB 구조, 데이터 형식, 접근 방식 등 DB를 구축하거나 수정할 목적으로 사용하는 언어.
DDL은 번역한 결과가 Data Dictionary라는 특별한 파일에 여러 테이블로서 저장.

DDL 사용 대상.
스키마( Schema ) : 테이블을 모아서 관리하는 논리적인 저장 단위.
도메인( Domain ) : 테이블에 저장할 수 있는 자료형이나 값에 붙인 별명.
테이블( Table ) : 데이터 저장 공간.
뷰( View ) : 하나 이상의 물리 테이블에서 유도되는 가상의 논리 테이블.
인덱스( index ) : 검색을 빠르게 하기 위한 데이터 구조.
동의어( Synonym ) : 객체에 대한 별명.
시퀀스( Sequence ) : 일련변호. - MySQL에는 Auto_increment가 유사한 역할.

명령어.
CREATE : 객체 생성.
ALTER : 객체 변경.
DROP : 객체 삭제.
TRUNCATE : 객체만 남기고 데이터 삭제.



 # PL / SQL 객체.

Anonymous Procedure : 자주 사용하는 DML 문장을 하나로 묶은 개체.
Stored Procedure : 프로시저를 생성해서 프로시저 이름을 통해 사용하는 개체.
Sotred Function : 함수를 생성해서 함수 이름을 통해 사용해서 연산 결과를 반환하는 개체.
Package : 같이 사용되는 함수나 프로시저를 묶은 개체.
Trigger : DML 문장을 수행하기 전이나 후에 수행되는 문장.



 # 개체 DDL.

개체 생성.
create domain / table / schema / database / ... 개체이름 ( 객체에 따른 옵션들 );

개체 확인.
desc 개체이름 ; 

개체 변경.
alter domain / table / schema / database / ... 개체이름 ( 변경할 옵션들 ) ;

개체 삭제.
drop domian / table / schema / database / ... 개체이름 ;

개체 이름 변경.
rename domain / table / schema / database / ... 새로운 개체 이름 ; 
alter domain / table / schema / database / ... 옛날이름 rename 새로운이름 ;



 # 제약 조건.

제약 조건.
primary key : 기본키를 정의함. not null + unique.
foreign key : 외래키를 정의함. references by 테이블이름(열이름)을 명시해야 함.
unique : 테이블 내에서 유일한 값을 가져야 함.
not null : null 값을 가질 수 없음.
check : 개발자가 원하는 제약 조건을 설정 할 수 있음.
default : 값을 설정하지 않을 시 자동으로 설정되는 값.

외래키 옵션.
no action : 아무런 조치를 하지 않음.
cascade : 같이 삭제되거나 변경.
set null : null로 설정.
set default : 기본값으로 설정.



 # 타입.

타입.
char : 고정 자릿수 문자.
varchar2 : 가변 자릿수 문자.
number : 숫자.
date : 날짜.



 # 테이블에 칼럼 변경.

테이블 변경.
alter table tableName add( column type ) : column 추가.
alter table tableName modify( column type ) : 기존에 있는 column의 type 변경.
alter table tableName drop column columnName : column 삭제.



 # DCL. 

DCL 유형.
사용자 권한 : 접근 통제가 목적으로 사용자를 등록하고, 권리를 부여하는 작업.
트랜잭션 : TCL을 별개로 분류하기도 하고 DCL과 같이 분류하기도 한다.

DCL.
grant : 권한 부여.
revoke : 권한 회수.

DCL 사용.
grant connect, resource to 사용자이름 ;
grant connect, resource on 객체명 to 사용자이름 ;
revoke connect, resource from 사용자이름 ;
revoke connect, resource on 객체명 from 사용자이름 ; 

TCL.
commit : 트랜잭션 확정. ( 데이터 저장 )
rollback : 트랜잭션 취소. ( 데이터 되돌리기 )
savepoint : rollback 지점 설정.



 # DML.

DML 유형.
INSERT : 테이블에 데이터 삽입.
SELECT : 테이블의 데이터 조회.
UPDATE : 테이블의 데이터 변경.
DELETE : 테이블의 데이터 삭제.

insert문.
insert into 테이블이름( column1, column2, ... ) values( data1, data2, ... ) ;
insert into 테이블이름 values( data1, data2, ... ) ;

select문.
select * from 테이블이름 where 조건 group by 조건 having 조건 order by 조건 ;

update문.
update 테이블이름 set column1 = data1, column2 = data2, ... where 조건 ;

delete문.
delete from 테이블이름 where 조건 ; 

주의사항.
insert문에 values에 data만 넣을 경우, 테이블에 정의된 열 순서대로 데이터가 들어간다.
update와 delete는 where절을 작성하지 않으면 열 전체가 바뀌거나, 테이블 전체가 삭제될 수 있다.



 # select 문.

Predicate.
ALL : 모든 튜플을 검색할 때 지정. ( 생략가능 )
distinct : 중복된 튜플이 있으면 그 중 첫번째 한 개만 검색.
distinctrow : 튜플 전체가 중복되어 있으면 그 중 첫번째 한 개만 검색.

select절.
* : 테이블을 구성하는 모든 속성.
테이블.속성 : 두 개 이상의 테이블에 공통으로 존재하는 속성을 지칭.
as : 별칭을 의미한다. ( 생략 가능 )

from절.
질의에 의해 검색될 데이터를 포함하는 개체( 테이블, 뷰 등 ).

where절.
검색할 조건을 기술함.
사용자가 원하는 자료만 조회하는 경우에 사용.

group by절.
특정 속성을 기준으로 그룹화하여 검색할 때 그룹화 할 속성을 지칭.
일반적으로 그룹 함수와 많이 사용된다.

having절.
group by와 함께 사용되며, 그룹에 대한 조건을 지칭.
where절과 같은 역할이지만, group by된 데이터는 having으로 조건처리 해야된다.

order by절.
특정 속성을 기준으로 정렬하여 검색할 때 사용.
asc : 오름차순 정렬.
desc : 내림차순 정렬.



 # 산술 표현식.

산술표현식.
사칙연산 : + , - , * , / 
select 문에서 from절을 제ㅐ외한 절에서 모두 사용가능.

주의사항.
null 값에 산술표현식을 사용하면 무조건 null이 나온다.



 # NVL / NVL2 함수.

NVL 관련 함수.
NVL( column , data ) : column이 null이면 data를 반환한다.
NVL2( column, data1, data2 ) : column이 null이면 data1을 반환하고, 아니면 data2를 반환.



 # Alias. 

Alias.
열 Heading 이름을 변경. ( 별칭 )
as로 사용하고, 때에 따라 생략 가능.
예약어를 사용하려면 " " 를 사용.



 # 비교 연산자.

비교연산자.
=, > , < , <= , ... : 등호를 통한 비교연산자.
<>, !=, ^ = : 같지 않다는 표현하는 연산자.
NOT column = : column과 같지 않다.
NOT column > : column보다 크지 않다. ( 작거나 같다 )



 # SQL 연산자.

SQL연산자.
AND : 두 가지 조건을 모두 참일 경우 검색.
or : 두 가지 조건 중 하나 이상 참일 경우 검색.
in ( datas,... ) : datas의 값 중 일치하는 값을 검색.
LIKE : %, _ 패턴과 일치.
is null : null 값 일치.
between a and b : a와 b사이. ( 두 값의 범위에 해당하는 행을 조회 - 작은 값을 앞에 위치 )

LIKE 패턴.
% : 문자가 없거나 하나 이상의 문자. '%A'
_ : 1개의 아무 문자를 의미한다. '_A'



 # SELECT문의 구문 순서.

구문순서.
SELECT [DISTINCT] FROM 테이블이름 WHERE 조건 GROUP BY 조건 HAVING 조건 ORDER BY 정렬 ;

실제 실행순서.
FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY ;






















