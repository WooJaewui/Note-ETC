
 서버 프로그램 구현(1) - 25ppt.



 # 개발 환경 구축.

개발 환경 구축.
해당 프로젝트의 목적과 구축 설계에 대한 이해가 필요하며 이에 맞는 하드웨어, 소프트웨어를 선정.
개발에 사용되는 제품들의 성능과 라이센스 사용 편의성 등의 내용도 파악.

HardWare 환경.
Web Server : 클라이언트로부터 전송된 웹 요청을 처리하는 서버. ( Apache, Google Web Server 등 )
Web Application Server : Web Server로부터 요청을 받아서 응답을 해주는 서버. ( Tomcat, Zeus 등 )
Database Server : 데이터베이스 관리를 위한 서버. ( Oracle, MySQL, HANA DB, MS-SQL 등 )
File Server : 데이터베이스에 저장하기 어려운 데이터를 파일로 저장하는 서버.

SoftWare 환경.
운영체제( Operation System ) : System Software로 하드웨어 운영을 위한 운영체제.
JVM.
Web Server.
Web Application Server.
DBMS.

개발 소프트웨어.
요구 사항 관리 도구 : 요구 사항의 수집과 분석 추적 등을 도와주는 소프트웨어. ( JIRA, Trello, JFeature 등 )
설계 - 모델링 도구 : 개발의 전 과정에서 설계 및 모델링르 도와주는 소프트웨어. ( ER-WIN, DB Designer 등 )
구현 도구 : 코드의 작성 및 편집 디버깅 등 과 같은 다양한 작업이 가능한 소프트웨어. ( Eclipse, VSC, IntelliJ 등 )
테스트 도구 : 소프트웨어의 품질을 높이기 위해 테스트에 사용되는 소프트웨어. ( xUnit, JUnit, Spring Test 등 )
형상관리 도구 : 팀 단위 프로젝트에서 버전 관리를 위해 사용되는 소프트웨어. ( CVS, Subversion, git 등 )
빌드 도구 : 개발자가 작성한 소스에 대한 빌드 및 배포를 지원하는 소프트웨어. ( Ant, Maven, Gradle 등 )
Group Ware : 서로 다른 작업 환경에서 프로젝트를 함께 수행하도록 도와주는 소프트웨어. ( Jenkins, Zoom 등 )

패키지 소프트웨어.
기업에서 사용하는 여러 기능들을 통합하여 제공하는 소프트웨어를 의미한다.
소프트웨어를 구입하여 기업 환경에 적합하게 커스터마이징하여 사용한다.



 # 소프트웨어 아키텍쳐 Software Architecture.

소프트웨어 아키텍쳐.
소프트웨어의 골격이 되는 기본 구조이다.
소프트웨어를 구성하는 요소들 간의 관계를 표현하는 시스템의 구조.

소프트웨어 아키텍쳐 설계의 기본 원리.
모듈화( Modularity ) : 소프트웨어의 성능을 향상시키거나 시스템의 기능들을 모듈 단위로 나누는 것.
추상화( Abstraction ) : 큰 틀을 짜고 세분화하여 구체화시켜 나가는 것.
단계적 분해( Stepwise Refinement ) : 하향식 설계 전략으로 상위의 중요개념에서 하위의 개념으로 분할.
정보 은닉( Information Hiding ) : 모듈 내부에 포함된 정보가 감추어져 다른 모듈이 접근하지 못하는 것.

품질 속성.
개념적 무결성 : 전체 시스템과 시스템을 이루는 구성 요소들 간 일관성을 유지하는 것.
정확성, 완결성 : 요구사항과 요구사항을 구현하기 위해 발생하는 제약사항들을 모두 충족시키는 것.
구축 가능성 : 시스템을 적절하게 분배하여 유연하게 일정을 변경할 수 있도록 하는 것.
기타 속성 : 변경성, 시험성, 적응성, 일치성, 대체성 등.

시스템 측면 속성.
성능 : 이벤트가 발생했을 때, 이를 적절하고 빠르게 처리하는 것.
보안 : 허용되지 않은 접근을 막고, 허용된 접근에는 서비스를 제공하는 것.
가용성 : 장애 없이 정상적으로 서비스를 제공하는 것.
기능성 : 사용자가 요구한 기능을 만족스럽게 구현하는 것.
사용성 : 사용자가 소프트웨어를 사용하는데 헤매지 않도록 명확하고 편리하게 구현하는 것.
변경 용이성 : 다른 하드웨어나 플랫폼에서 동작할 수 있도록 구현하는 것.
확장성 : 시스템을 확장시켰을 때 이를 효과적으로 활용할 수 있도록 구현하는 것.
기타 속성 : 테스트 용이성, 배치성, 안정성 등.

아키텍처 패턴.
아키텍처를 설계할 때 참조할 수 있는 전형적인 해결 방식.

아키텍처 패턴 종류.
레이어 패턴 : 시스템을 계층으로 구분하여 구성하는 고전방법 중 하나. ( OSI 참조 모델 )
클라이언트 / 서버 패턴 : 클라이언트를 통해 서버에 요청하고 클라이언트가 응답 받아 사용자에게 제공.
파이프 / 필터 패턴 : 데이터 스트림 절차의 각 단계를 필터 컴포넌트로 캡슐화하여 파이프를 통해 전송.
MVC 패턴 : 모델, 뷰 , 컨트롤러 3개의 부분을 별도의 컴포넌트로 분리하여 구조화하는 패턴이다.
MVVM 패턴 : 비지니스 로직과 프레젠테이션 로직을 UI로부터 분리하는 것이다. ( 모델, 뷰, 뷰 모델로 구성 )
마스터 - 슬레이브 패턴 : 마스터에서 슬레이브로 작업을 분할한 후 처리된 결과를 다시 돌려받는 방식.
브로커 패턴 : 사용자가 원하는 서비스를 브로커 컴포넌트에 요청하면 연결해주는 패턴.
피어 투 피어 패턴 : 피어를 컴포넌트로 간주하며 각 피어는 클라이언트 / 서버 역할을 모두 할 수 있다.
이벤트 버스 패턴 : 이벤트 메시지를 발행하면 해당 채널을 구독한 리스너들이 이벤트를 처리.
블랙보드 패턴 : 모든 컴포넌트들이 공유 데이터 저장소와 블랙보드에 접근하여 데이터를 찾는 방식.
인터프리터 패턴 : 각 라인을 수행하는 방법을 지정하는 방식.

설계 과정.
설계 목표 설정 : 비즈니스 목표, 우선순위 등의 요구사항을 분석하여 시스템의 설계 목표를 설정.
시스템 타입 결정 : 시스템, 서브시스템의 타입을 결정하고, 아키텍처 패턴을 선택.
아키텍처 패턴 적용 : 아키텍처 패턴을 참조하여 시스템의 표준 아키텍처를 설계.
서브시스템 구체화 : 서브시스템의 기능 및 서브시스템 간의 상호작용을 위한 인터페이스 정의.
검토 : 아키텍처 설계 목표에 부합하는지 검토.



 # 객체 지향.

객체 지향 프로그래밍.
소프트웨어의 모든 요소들을 객체로 만든 후 객체를 이용해서 프로그램을 개발하는 방식.

객체 지향 용어.
객체( Object ) : 동일한 목적을 위해 모인 데이터들과 이에 댛나 연산을 가지는 것.
클래스( Class ) : 유사한 역할을 객체들의 모임으로 사용자 정의 자료형.
인스턴스 : 클래스를 기반으로 생성된 객체.
캡슐화( Encapsulation ) : 정보 은폐를 통해 변경 작업 시에 부작용을 최소화할 수 있다.
속성( Property ) : 각 객체가 가지고 있는 정보로서 객체의 성질, 분류 등을 표현.
message : 객체와 객체 사이의 통신수단.
상속( Inheritance ) : 상위 클래스의 메소드에 존재하는 모든 속성을 하위 클래스가 계승.
오버로드 : 하나의 클래스에 메소드의 이름이 같은 메소드가 존재하는 경우.
오바라이드 : 상위 클래스와 하위 클래스에 동일한 원형의 메소드가 존재하는 경우.
다형성( Polymorphism ) : 부모 타입의 변수에 자식 인스턴스를 대입하는 것.

객체 지향 분석.
사용자의 요구사항과 관련된 객체, 속성, 연산 등을 정의하여 모델링 하는 기법.

객체지향 설계 원칙.
단일 책임 원칙 : 객체는 단 하나의 책임만 가져야 함.
개방-폐쇄 원칙 : 기존의 코드를 변경하지 않고 기능을 추가.
리스코프 치환 원칙 : 하위 클래스는 상위 클래스의 기능을 수행할 수 있어야 함.
인터페이스 분리 원칙 : 자신이 사용하지 않는 인터페이스와 분리.
의존 역전 원칙 : 의존 관계 성립 시 추상성이 높은 클래스와 의존 관계를 맺어야 함.



 # 모듈.

모듈.
독립적으로 수행 가능한 코드의 모임으로 서브시스템이라고 함.
소프트웨어의 성능을  시스템의 수정 및 재사용, 유지 관리 등이 용이하도록 함.
독립성이 높은 모듈일수록 수정하더라도 다른 모듈에게 영향을 미치지 않는다.

응집도.
한 모듈 안의 기능들의 연관성 정도로 아래로 내려갈수록 낮아지며 좋지 못하다.

응집도 종류.
기능적 응집도( Functional Cohesion ) : 모듈 내부의 모든 기능이 단일한 목적을 위해 수행.
순차적 응집도( Sequential Cohesion ) : 모듈 내에서 한 활동으로 나온 출력값을 다른 활동의 입력으로 사용.
통신적 응집도( Communication Cohesion ) : 동일한 입/출력을 하여 다른 기능들이 모여있는 경우.
절차적 응집도( Procedural Cohesion ) : 모듈 안의 구성 요소들이 순차적으로 수행할 경우.
시간적 응집도( Temporal Cohesion ) : 연관된 기능이라기보단 특정 시간에 처리.
논리적 응집도( Logical Cohesion ) : 유사한 성격을 갖는 요소들을 한 모듈에서 처리.
우연적 응집도( Coincidental Cohesion ) : 모듈 내부의 요소들이 연관이 없을 경우.

결합도.
모듈과 모듈 간의 관련성 정도로 관련이 적을수록 독립성이 높아져 모듈 간 영향이 적다.

결합도 종류.
자료 결합도( Data Coupling ) : 파라미터를 통해서만 모듈 간의 상호 작용이 일어나는 경우.
스탬프 결합도( Stamp Coupling ) : 배열이나 오브젝트, 스트럭처 등이 전달되는 경우.
제어 결합도( Control Coupling ) : 처리에 관한 제어 요소가 전달되는 경우.
외부 결합도( External Coupling ) : 모듈 밖에서 도입된 데이터 등을 공유할 때 발생하는 경우.
공통 결합도( Common Coupling ) : 모듈 밖에 선언되어 있는 전역 변수를 참조하고 상호 작용하는 경우.
내용 결합도( Content Coupling ) : 다른 모듈 내부에 있는 기능을 사용하는 경우.

결합도 관련 용어.
Fan - In : 자신을 호출하는 모듈의 수.
Fan - Out : 자신이 호출하는 모듈의 수.

단위 모듈.
한 가지 동작을 수행하는 기능을 모듈로 구현한 것.

공통 모듈.
정보 시스템 구축 시 자주 사용하는 기능들로 재사용이 가능하게 패키지로 제공하는 독립된 모듈.

효과적인 모듈 설계 방안.
결합도는 줄이고 응집도는 높이는 형태로 재사용성을 높임.
모듈 간의 계층적 관계를 정의하는 자료가 제시되어야 함.

테스트 케이스.
요구 사항을 준수하는지 검증하기 위한 테스트 조건을 명세한 것.

테스트 케이스 구성요소.
식별자 : 설명 항목 식별자, 일련번호.
테스트 항목 : 테스트할 모듈 또는 기능.
입력 명세 : 입력값 또는 테스트 조건.
출력 명세 : 테스트 케이스 실행 시 기대되는 출력값 결과.
환경 설정 : 테스트 수행 시 필요한 하드웨어나 소프트웨어 환경.
특수 절차 요구 : 테스트 케이스 수행 시 특별히 요구되는 절차.
의존성 기술 : 테스트 케이스 간의 의존성.

테스트 프로세스 단계.
계획 및 제어 - > 분석 및 설계 - > 구현 및 실행 - > 평가 - > 완료.

















